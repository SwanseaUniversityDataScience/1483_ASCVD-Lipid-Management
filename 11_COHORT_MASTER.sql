--
--
------------------------------------------
--
-- Script:			11_COHORT_MASTER.sql
-- SAIL project:	1483 - Cardiovascular disease risk prediction and optimisation of risk factor management
--
-- About:			Creating master table for characterising cohort
-- Author:			Daniel King
------------------------------------------
--
-- Characteristics of all ASCVD patients at entry to the study - prior to exclusions (not final cohort)
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.COHORT_MASTER_PRE_EXCL');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.COHORT_MASTER_PRE_EXCL
(
ALF_PE						BIGINT,
GENDER						INTEGER,
ONS_AGE_BAND				VARCHAR(12),
ETHNICITY					VARCHAR(15),
WIMD_2019_QUINTILE			INTEGER,
WEIGHT_CAT					VARCHAR(5),
BMI							DECIMAL(31,8),
INCLUSION_TOTAL				INTEGER,
INCLUSION_STUDY_PERIOD		INTEGER,	
FIRST_DATE					DATE,
FIRST_YEAR					INTEGER,
AGE_DIAG					INTEGER,
AGE_ENTRY					INTEGER,
TYPE						VARCHAR(15),
INDEX_MULTI_TERR			INTEGER,
INDEX_MULTI_TERR_TYPE		VARCHAR(15),
HAS_2_TERR					INTEGER,
TERR_2_DATE					DATE,
TERR_2_YEAR					INTEGER,
TERR_2_TYPE					VARCHAR(15),
AGE_TERR_2_DIAG				INTEGER,
AGE_TERR_2_ENTRY			INTEGER,
HAS_3_TERR					INTEGER,
TERR_3_DATE					DATE,
TERR_3_YEAR					INTEGER,
TERR_3_TYPE					VARCHAR(15),
AGE_TERR_3_DIAG				INTEGER,
AGE_TERR_3_ENTRY			INTEGER,
DEATH_DT					DATE,
DEATH_YEAR					INTEGER,
AGE_AT_DEATH				INTEGER,
DEATH_EVENT					INTEGER,
CENSOR_DATE					DATE,
CENSOR_REASON				VARCHAR(9),
CENSOR_DEAD					INTEGER,
CENSOR_MIGRATION			INTEGER,
MIGRATION_DATE				DATE,
CENSOR_GP_LOSS				INTEGER,
GP_LOSS_DATE				DATE,
STUDY_30D_FOLLOW_UP			INTEGER,
STUDY_60D_FOLLOW_UP			INTEGER,
STUDY_90D_FOLLOW_UP			INTEGER,
STUDY_120D_FOLLOW_UP		INTEGER,
STUDY_365D_FOLLOW_UP		INTEGER,
PEDW_ADMIS_FIRST			INTEGER,
GP_ADMIS_FIRST				INTEGER,
INCIDENT					INTEGER,
PREVALENT					INTEGER,
HAS_GP_DIAG					INTEGER,
GP_DIAG_AFTER_PEDW_5		INTEGER,
GP_DIAG_AFTER_PEDW_30		INTEGER,
GP_DIAG_AFTER_PEDW_90		INTEGER,
GP_DIAG_AFTER_PEDW_365		INTEGER
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.COHORT_MASTER_PRE_EXCL
--
WITH GP_FOLLOWING_PEDW_5 AS
(
SELECT
DISTINCT ALF_PE
FROM 
(
SELECT 
P.ALF_PE,
P.FIRST_DATE AS FIRST_PEDW,
G.EVENT_DT AS DATE_GP,
DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) AS DIFF,
A.READ_TYPE AS EVENT_DESC
FROM SAILW1483V.PREP_INC_PREV_PEDW P

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED G
ON P.ALF_PE = G.ALF_PE
AND G.EVENT_DT BETWEEN P.FIRST_DATE AND P.FIRST_DATE+5

JOIN SAILW1483V.PHEN_ASCVD_READ A
ON G.EVENT_CD = A.READ_CODE

WHERE DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) >= 0 
)
),

GP_FOLLOWING_PEDW_30 AS
(
SELECT
DISTINCT ALF_PE
FROM 
(
SELECT 
P.ALF_PE,
P.FIRST_DATE AS FIRST_PEDW,
G.EVENT_DT AS DATE_GP,
DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) AS DIFF,
A.READ_TYPE AS EVENT_DESC
FROM SAILW1483V.PREP_INC_PREV_PEDW P

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED G
ON P.ALF_PE = G.ALF_PE
AND G.EVENT_DT BETWEEN P.FIRST_DATE AND P.FIRST_DATE+30

JOIN SAILW1483V.PHEN_ASCVD_READ A
ON G.EVENT_CD = A.READ_CODE

WHERE DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) >= 0 
)
),

GP_FOLLOWING_PEDW_90 AS
(
SELECT
DISTINCT ALF_PE
FROM 
(
SELECT 
P.ALF_PE,
P.FIRST_DATE AS FIRST_PEDW,
G.EVENT_DT AS DATE_GP,
DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) AS DIFF,
A.READ_TYPE AS EVENT_DESC
FROM SAILW1483V.PREP_INC_PREV_PEDW P

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED G
ON P.ALF_PE = G.ALF_PE
AND G.EVENT_DT BETWEEN P.FIRST_DATE AND P.FIRST_DATE+90

JOIN SAILW1483V.PHEN_ASCVD_READ A
ON G.EVENT_CD = A.READ_CODE

WHERE DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) >= 0 
)
),

GP_FOLLOWING_PEDW_365 AS
(
SELECT
DISTINCT ALF_PE
FROM 
(
SELECT 
P.ALF_PE,
P.FIRST_DATE AS FIRST_PEDW,
G.EVENT_DT AS DATE_GP,
DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) AS DIFF,
A.READ_TYPE AS EVENT_DESC
FROM SAILW1483V.PREP_INC_PREV_PEDW P

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED G
ON P.ALF_PE = G.ALF_PE
AND G.EVENT_DT BETWEEN P.FIRST_DATE AND P.FIRST_DATE+365

JOIN SAILW1483V.PHEN_ASCVD_READ A
ON G.EVENT_CD = A.READ_CODE

WHERE DAYS(G.EVENT_DT) - DAYS(P.FIRST_DATE) >= 0 
)
),

AGES AS
(
SELECT
T.ALF_PE,
CASE
	WHEN T.TERR_COUNT = 1 AND T.PEDW_ADMIS = 1 THEN E.AGE_EPI_STR_YR	
	WHEN T.TERR_COUNT = 1 AND T.GP_ADMIS = 1  THEN YEAR(T.FIRST_DATE - GP.WOB)
END AS AGE_DIAG,
CASE
	WHEN T.TERR_COUNT = 1 AND T.PEDW_ADMIS = 1 AND T.INC_PREV = 1 THEN E.AGE_EPI_STR_YR	
	WHEN T.TERR_COUNT = 1 AND T.PEDW_ADMIS = 1 AND T.INC_PREV = 0 THEN (2010 - YEAR(T.FIRST_DATE)) + E.AGE_EPI_STR_YR
	WHEN T.TERR_COUNT = 1 AND T.GP_ADMIS = 1 AND T.INC_PREV = 1 THEN YEAR(T.FIRST_DATE - GP.WOB)
	WHEN T.TERR_COUNT = 1 AND T.GP_ADMIS = 1 AND T.INC_PREV = 0 THEN (2010 - YEAR(T.FIRST_DATE)) + YEAR(T.FIRST_DATE - GP.WOB) 	
END AS AGE_ENTRY,

CASE
	WHEN T.TERR_COUNT = 2 AND T.PEDW_ADMIS = 1 THEN E.AGE_EPI_STR_YR	
	WHEN T.TERR_COUNT = 2 AND T.GP_ADMIS = 1  THEN YEAR(T.FIRST_DATE - GP.WOB)	
END AS AGE_TERR_2_DIAG,
CASE
	WHEN T.TERR_COUNT = 2 AND T.PEDW_ADMIS = 1 AND T.INC_PREV = 1 THEN E.AGE_EPI_STR_YR	
	WHEN T.TERR_COUNT = 2 AND T.PEDW_ADMIS = 1 AND T.INC_PREV = 0 THEN (2010 - YEAR(T.FIRST_DATE)) + E.AGE_EPI_STR_YR
	WHEN T.TERR_COUNT = 2 AND T.GP_ADMIS = 1 AND T.INC_PREV = 1 THEN YEAR(T.FIRST_DATE - GP.WOB)
	WHEN T.TERR_COUNT = 2 AND T.GP_ADMIS = 1 AND T.INC_PREV = 0 THEN (2010 - YEAR(T.FIRST_DATE)) + YEAR(T.FIRST_DATE - GP.WOB) 	
END AS AGE_TERR_2_ENTRY,

CASE
	WHEN T.TERR_COUNT = 3 AND T.PEDW_ADMIS = 1 THEN E.AGE_EPI_STR_YR	
	WHEN T.TERR_COUNT = 3 AND T.GP_ADMIS = 1  THEN YEAR(T.FIRST_DATE - GP.WOB)
END AS AGE_TERR_3_DIAG,
CASE
	WHEN T.TERR_COUNT = 3 AND T.PEDW_ADMIS = 1 AND T.INC_PREV = 1 THEN E.AGE_EPI_STR_YR	
	WHEN T.TERR_COUNT = 3 AND T.PEDW_ADMIS = 1 AND T.INC_PREV = 0 THEN (2010 - YEAR(T.FIRST_DATE)) + E.AGE_EPI_STR_YR
	WHEN T.TERR_COUNT = 3 AND T.GP_ADMIS = 1 AND T.INC_PREV = 1 THEN YEAR(T.FIRST_DATE - GP.WOB)
	WHEN T.TERR_COUNT = 3 AND T.GP_ADMIS = 1 AND T.INC_PREV = 0 THEN (2010 - YEAR(T.FIRST_DATE)) + YEAR(T.FIRST_DATE - GP.WOB) 	
END AS AGE_TERR_3_ENTRY

FROM SAILW1483V.PREP_INC_PREV_TERR T

LEFT JOIN SAILW1483V.EXTRACT_PEDW_SPELL S
ON T.ALF_PE = S.ALF_PE
AND T.FIRST_DATE = S.ADMIS_DT

LEFT JOIN SAILW1483V.EXTRACT_PEDW_EPISODE E
ON S.PROV_UNIT_CD = E.PROV_UNIT_CD 
AND S.SPELL_NUM_PE = E.SPELL_NUM_PE

LEFT JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON T.ALF_PE = GP.ALF_PE
AND T.FIRST_DATE = GP.EVENT_DT
),

AGES_GROUPED AS
(
SELECT
ALF_PE,
MAX(AGE_DIAG) 			AS AGE_DIAG,
MAX(AGE_ENTRY) 			AS AGE_ENTRY,
MAX(AGE_TERR_2_DIAG) 	AS AGE_TERR_2_DIAG,
MAX(AGE_TERR_2_ENTRY) 	AS AGE_TERR_2_ENTRY,
MAX(AGE_TERR_3_DIAG) 	AS AGE_TERR_3_DIAG,
MAX(AGE_TERR_3_ENTRY) 	AS AGE_TERR_3_ENTRY

FROM AGES
GROUP BY ALF_PE
),

A AS
(
SELECT 
I.ALF_PE,
CASE 
	WHEN T.TERR_COUNT = 1 THEN I.FIRST_DATE
	ELSE NULL
END FIRST_DATE,
CASE 
	WHEN T.TERR_COUNT = 1 THEN T.TYPE 
	ELSE NULL
END AS TYPE,
CASE 
	WHEN T.TERR_COUNT = 2 THEN 1 
	ELSE 0
END AS HAS_2_TERR,
CASE 
	WHEN T.TERR_COUNT = 2 THEN T.FIRST_DATE 
	ELSE NULL
END AS TERR_2_DATE,
CASE 
	WHEN T.TERR_COUNT = 2 THEN T.TYPE 
	ELSE NULL
END AS TERR_2_TYPE,
CASE 
	WHEN T.TERR_COUNT = 3 THEN 1 
	ELSE 0
END AS HAS_3_TERR,
CASE 
	WHEN T.TERR_COUNT = 3 THEN T.FIRST_DATE 
	ELSE NULL
END AS TERR_3_DATE,
CASE 
	WHEN T.TERR_COUNT = 3 THEN T.TYPE 
	ELSE NULL
END AS TERR_3_TYPE,
CAST(D.DEATH_DT AS DATE) AS DEATH_DT,
I.PEDW_ADMIS AS PEDW_ADMIS_FIRST,
I.GP_ADMIS AS GP_ADMIS_FIRST,
I.INCIDENT,
I.PREVALENT,
CASE 
	WHEN GP_A.ALF_PE IS NOT NULL THEN 1 
	ELSE 0 
END AS HAS_GP_DIAG,
CASE 
	WHEN I.GP_ADMIS = 1 THEN NULL
	WHEN G_5.ALF_PE IS NOT NULL THEN 1 
	ELSE 0 
END AS GP_DIAG_AFTER_PEDW_5,
CASE 
	WHEN I.GP_ADMIS = 1 THEN NULL
	WHEN G_30.ALF_PE IS NOT NULL THEN 1 
	ELSE 0 
END AS GP_DIAG_AFTER_PEDW_30,
CASE 
	WHEN I.GP_ADMIS = 1 THEN NULL
	WHEN G_90.ALF_PE IS NOT NULL THEN 1 
	ELSE 0 
END AS GP_DIAG_AFTER_PEDW_90,
CASE 
	WHEN I.GP_ADMIS = 1 THEN NULL
	WHEN G_365.ALF_PE IS NOT NULL THEN 1 
	ELSE 0 
END AS GP_DIAG_AFTER_PEDW_365
	
FROM SAILW1483V.PREP_INC_PREV_FIRST_SPLIT I

LEFT JOIN SAILW1483V.EXTRACT_ADDE_DEATHS D
ON I.ALF_PE = D.ALF_PE

LEFT JOIN SAILW1483V.PREP_ALF_WLGP GP_A
ON I.ALF_PE = GP_A.ALF_PE

LEFT JOIN GP_FOLLOWING_PEDW_5 G_5
ON I.ALF_PE = G_5.ALF_PE

LEFT JOIN GP_FOLLOWING_PEDW_30 G_30
ON I.ALF_PE = G_30.ALF_PE

LEFT JOIN GP_FOLLOWING_PEDW_90 G_90
ON I.ALF_PE = G_90.ALF_PE

LEFT JOIN GP_FOLLOWING_PEDW_365 G_365
ON I.ALF_PE = G_365.ALF_PE

LEFT JOIN SAILW1483V.PREP_INC_PREV_TERR T
ON I.ALF_PE = T.ALF_PE
)
,

A_GROUPED AS
(
SELECT
ALF_PE,
MAX(FIRST_DATE) 			AS FIRST_DATE,
MAX(TYPE) 					AS TYPE,
MAX(HAS_2_TERR) 			AS HAS_2_TERR,
MAX(TERR_2_DATE) 			AS TERR_2_DATE,
MAX(TERR_2_TYPE) 			AS TERR_2_TYPE,
MAX(HAS_3_TERR) 			AS HAS_3_TERR,
MAX(TERR_3_DATE) 			AS TERR_3_DATE,
MAX(TERR_3_TYPE) 			AS TERR_3_TYPE,
MAX(DEATH_DT) 				AS DEATH_DT,
MAX(PEDW_ADMIS_FIRST) 		AS PEDW_ADMIS_FIRST,
MAX(GP_ADMIS_FIRST) 		AS GP_ADMIS_FIRST,
MAX(INCIDENT) 				AS INCIDENT,
MAX(PREVALENT) 				AS PREVALENT,
MAX(HAS_GP_DIAG) 			AS HAS_GP_DIAG,
MAX(GP_DIAG_AFTER_PEDW_5) 	AS GP_DIAG_AFTER_PEDW_5,
MAX(GP_DIAG_AFTER_PEDW_30) 	AS GP_DIAG_AFTER_PEDW_30,
MAX(GP_DIAG_AFTER_PEDW_90) 	AS GP_DIAG_AFTER_PEDW_90,
MAX(GP_DIAG_AFTER_PEDW_365) AS GP_DIAG_AFTER_PEDW_365
FROM A
GROUP BY ALF_PE
),

B AS
(
SELECT
A.ALF_PE,
GP.WOB,
CASE
	WHEN A.PEDW_ADMIS_FIRST = 1 THEN CAST(S.GNDR_CD AS INTEGER) 
	ELSE CAST(GP.GNDR_CD AS INTEGER)
END AS GENDER,
A.FIRST_DATE,
CASE 
	WHEN FIRST_DATE IS NOT NULL THEN AGE.AGE_DIAG
	ELSE NULL
END AS AGE_DIAG,
CASE 
	WHEN FIRST_DATE IS NOT NULL THEN AGE.AGE_ENTRY
	ELSE NULL
END AS AGE_ENTRY,
A.TYPE,
A.HAS_2_TERR,
A.TERR_2_DATE,
A.TERR_2_TYPE,
CASE 
	WHEN TERR_2_DATE IS NOT NULL THEN AGE.AGE_TERR_2_DIAG
	ELSE NULL
END AS AGE_TERR_2_DIAG,
CASE 
	WHEN TERR_2_DATE IS NOT NULL THEN AGE.AGE_TERR_2_ENTRY
	ELSE NULL
END AS AGE_TERR_2_ENTRY,
A.HAS_3_TERR,
A.TERR_3_DATE,
A.TERR_3_TYPE,
CASE 
	WHEN TERR_3_DATE IS NOT NULL THEN AGE.AGE_TERR_3_DIAG
	ELSE NULL
END AS AGE_TERR_3_DIAG,
CASE 
	WHEN TERR_3_DATE IS NOT NULL THEN AGE.AGE_TERR_3_ENTRY
	ELSE NULL
END AS AGE_TERR_3_ENTRY,
A.DEATH_DT,
CASE 
	WHEN A.DEATH_DT IS NOT NULL
	THEN 1 ELSE 0 END AS CENSOR_DEAD,
CASE 
	WHEN DAYS(A.DEATH_DT) - DAYS(A.FIRST_DATE) < 90 THEN 1 
	ELSE 0 
END AS DEATH_EVENT,
A.PEDW_ADMIS_FIRST,
A.GP_ADMIS_FIRST,
A.INCIDENT,
A.PREVALENT,
A.HAS_GP_DIAG,
A.GP_DIAG_AFTER_PEDW_5,
A.GP_DIAG_AFTER_PEDW_30,
A.GP_DIAG_AFTER_PEDW_90,
A.GP_DIAG_AFTER_PEDW_365

FROM A_GROUPED A

LEFT JOIN SAILW1483V.EXTRACT_PEDW_SPELL S
ON A.ALF_PE = S.ALF_PE
AND A.FIRST_DATE = S.ADMIS_DT

LEFT JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE
AND A.FIRST_DATE = GP.EVENT_DT

LEFT JOIN AGES_GROUPED AGE
ON A.ALF_PE = AGE.ALF_PE
),

RANKED AS
(
SELECT
*
FROM
(
SELECT 
*,
ROW_NUMBER() OVER(PARTITION BY ALF_PE ORDER BY FIRST_DATE) AS RANK
FROM B 
)
WHERE RANK = 1
),

C AS
(
SELECT
R.ALF_PE,
R.GENDER,
G.WIMD_2019_QUINTILE,
CASE
	WHEN R.PEDW_ADMIS_FIRST = 1 THEN ((DAYS(R.DEATH_DT) - DAYS(R.FIRST_DATE))/365) + AGE_DIAG
	ELSE (DAYS(R.DEATH_DT) - DAYS(WOB))/365 
END AS AGE_AT_DEATH,
R.FIRST_DATE,
R.AGE_DIAG,
CASE 
	WHEN R.AGE_DIAG >= R.AGE_ENTRY THEN R.AGE_DIAG
	ELSE R.AGE_ENTRY
END AS AGE_ENTRY,
R.TYPE,
R.HAS_2_TERR,
R.TERR_2_DATE,
R.TYPE || ' ' || R.TERR_2_TYPE AS TERR_2_TYPE,
R.AGE_TERR_2_DIAG,
CASE 
	WHEN R.AGE_TERR_2_DIAG >= R.AGE_TERR_2_ENTRY THEN R.AGE_TERR_2_DIAG
	ELSE R.AGE_TERR_2_ENTRY
END AS AGE_TERR_2_ENTRY,
R.HAS_3_TERR,
R.TERR_3_DATE,
R.TYPE || ' ' || R.TERR_2_TYPE || ' ' || R.TERR_3_TYPE AS TERR_3_TYPE,
R.AGE_TERR_3_DIAG,
CASE 
	WHEN R.AGE_TERR_3_DIAG >= R.AGE_TERR_3_ENTRY THEN R.AGE_TERR_3_DIAG
	ELSE R.AGE_TERR_3_ENTRY
END AS AGE_TERR_3_ENTRY,
R.DEATH_DT,
R.DEATH_EVENT,
CASE 
	WHEN M.ALF_PE IS NOT NULL THEN 1 
	ELSE 0 
END AS CENSOR_MIGRATION,
M.START_DATE AS MIGRATION_DATE,
R.CENSOR_DEAD,
R.PEDW_ADMIS_FIRST,
R.GP_ADMIS_FIRST,
R.INCIDENT,
R.PREVALENT,
R.HAS_GP_DIAG,
R.GP_DIAG_AFTER_PEDW_5,
R.GP_DIAG_AFTER_PEDW_30,
R.GP_DIAG_AFTER_PEDW_90,
R.GP_DIAG_AFTER_PEDW_365
FROM RANKED R

LEFT JOIN SAILW1483V.PREP_CENSOR_MIGR M
ON R.ALF_PE = M.ALF_PE

LEFT JOIN SAILW1483V.EXTRACT_WDSD_SINGLE_CLEAN_GEO_CHAR_LSOA2011 G
ON R.ALF_PE = G.ALF_PE AND (R.FIRST_DATE BETWEEN G.START_DATE AND G.END_DATE)
),

D AS
(
SELECT
C.ALF_PE,
C.GENDER,
CASE 
	WHEN PREVALENT = 1 THEN G_2.WIMD_2019_QUINTILE 
	ELSE C.WIMD_2019_QUINTILE 
END AS WIMD_2019_QUINTILE,
C.FIRST_DATE,
C.AGE_DIAG,
C.AGE_ENTRY,
C.TYPE,
CASE 
	WHEN (YEAR(C.FIRST_DATE) = YEAR(C.TERR_2_DATE) AND YEAR(C.TERR_2_DATE) = YEAR(C.TERR_3_DATE)) THEN 1
	WHEN YEAR(C.FIRST_DATE) = YEAR(C.TERR_2_DATE) THEN 1
	ELSE 0
END AS INDEX_MULTI_TERR,
CASE 
	WHEN (YEAR(C.FIRST_DATE) = YEAR(C.TERR_2_DATE) AND YEAR(C.TERR_2_DATE) = YEAR(C.TERR_3_DATE)) THEN C.TERR_3_TYPE
	WHEN YEAR(C.FIRST_DATE) = YEAR(C.TERR_2_DATE) THEN C.TERR_2_TYPE
	ELSE NULL
END AS INDEX_MULTI_TERR_TYPE,
C.HAS_2_TERR,
C.TERR_2_DATE,
C.TERR_2_TYPE,
C.AGE_TERR_2_DIAG,
C.AGE_TERR_2_ENTRY,
C.HAS_3_TERR,
C.TERR_3_DATE,
C.TERR_3_TYPE,
C.AGE_TERR_3_DIAG,
C.AGE_TERR_3_ENTRY,
C.DEATH_DT,
C.AGE_AT_DEATH,
C.DEATH_EVENT,
C.CENSOR_DEAD,
C.CENSOR_MIGRATION,
C.MIGRATION_DATE,
CASE 
	WHEN G.ALF_PE IS NOT NULL THEN 1 
	ELSE 0 
END AS CENSOR_GP_LOSS,
G.START_DATE AS GP_LOSS_DATE,
C.PEDW_ADMIS_FIRST,
C.GP_ADMIS_FIRST,
C.INCIDENT,
C.PREVALENT,
C.HAS_GP_DIAG,
C.GP_DIAG_AFTER_PEDW_5,
C.GP_DIAG_AFTER_PEDW_30,
C.GP_DIAG_AFTER_PEDW_90,
C.GP_DIAG_AFTER_PEDW_365
FROM C

LEFT JOIN SAILW1483V.PREP_CENSOR_GP_LOSS G
ON C.ALF_PE = G.ALF_PE

LEFT JOIN SAILW1483V.EXTRACT_WDSD_SINGLE_CLEAN_GEO_CHAR_LSOA2011 G_2
ON C.ALF_PE = G_2.ALF_PE AND (SAILW1483V.STUDY_START_DATE BETWEEN G_2.START_DATE AND G_2.END_DATE)
),

E AS
(
SELECT
D.ALF_PE,
GENDER,
ETH.ETHN_EC_ONS_DATE_LATEST_DESC AS ETHNICITY,
WIMD_2019_QUINTILE,
FIRST_DATE,
AGE_DIAG,
AGE_ENTRY,
CASE 
	WHEN TYPE = 'STROKE IHD' 		OR TYPE = 'IHD STROKE' 		THEN 'ST IHD'
	WHEN TYPE = 'STROKE PAD' 		OR TYPE = 'PAD STROKE' 		THEN 'PAD ST'
	WHEN TYPE = 'PAD IHD' 			OR TYPE = 'IHD PAD' 		THEN 'IHD PAD'
	WHEN TYPE = 'STROKE PAD IHD' 	OR TYPE = 'STROKE IHD PAD'	OR TYPE = 'PAD STROKE IHD' OR TYPE = 'PAD IHD STROKE' OR TYPE = 'IHD STROKE PAD' OR TYPE = 'IHD PAD STROKE' THEN 'ST IHD PAD'
	WHEN TYPE = 'STROKE' THEN 'ST'
	ELSE TYPE
END AS TYPE,
INDEX_MULTI_TERR,
CASE 
	WHEN INDEX_MULTI_TERR_TYPE = 'STROKE IHD' 		OR INDEX_MULTI_TERR_TYPE = 'IHD STROKE' 		THEN 'ST IHD'
	WHEN INDEX_MULTI_TERR_TYPE = 'STROKE PAD' 		OR INDEX_MULTI_TERR_TYPE = 'PAD STROKE' 		THEN 'PAD ST'
	WHEN INDEX_MULTI_TERR_TYPE = 'PAD IHD' 			OR INDEX_MULTI_TERR_TYPE = 'IHD PAD' 			THEN 'IHD PAD'
	WHEN INDEX_MULTI_TERR_TYPE = 'STROKE PAD IHD' 	OR INDEX_MULTI_TERR_TYPE = 'STROKE IHD PAD'	OR INDEX_MULTI_TERR_TYPE = 'PAD STROKE IHD' OR INDEX_MULTI_TERR_TYPE = 'PAD IHD STROKE' OR INDEX_MULTI_TERR_TYPE = 'IHD STROKE PAD' OR INDEX_MULTI_TERR_TYPE = 'IHD PAD STROKE' THEN 'ST IHD PAD'
	WHEN INDEX_MULTI_TERR_TYPE = 'STROKE' THEN 'ST'
	ELSE INDEX_MULTI_TERR_TYPE
END AS INDEX_MULTI_TERR_TYPE,
HAS_2_TERR,
TERR_2_DATE,
CASE 
	WHEN TERR_2_TYPE = 'STROKE IHD' 	OR TERR_2_TYPE = 'IHD STROKE' 		THEN 'ST IHD'
	WHEN TERR_2_TYPE = 'STROKE PAD' 	OR TERR_2_TYPE = 'PAD STROKE' 		THEN 'PAD ST'
	WHEN TERR_2_TYPE = 'PAD IHD' 		OR TERR_2_TYPE = 'IHD PAD' 			THEN 'IHD PAD'
	WHEN TERR_2_TYPE = 'STROKE PAD IHD' OR TERR_2_TYPE = 'STROKE IHD PAD' OR TERR_2_TYPE = 'PAD STROKE IHD' OR TERR_2_TYPE = 'PAD IHD STROKE' OR TERR_2_TYPE = 'IHD STROKE PAD' OR TERR_2_TYPE = 'IHD PAD STROKE' THEN 'ST IHD PAD'
	ELSE TERR_2_TYPE
END AS TERR_2_TYPE,
AGE_TERR_2_DIAG,
AGE_TERR_2_ENTRY,
HAS_3_TERR,
TERR_3_DATE,
CASE 
	WHEN TERR_3_TYPE = 'STROKE PAD IHD' OR TERR_3_TYPE = 'STROKE IHD PAD' OR TERR_3_TYPE = 'PAD STROKE IHD' OR TERR_3_TYPE = 'PAD IHD STROKE' OR TERR_3_TYPE = 'IHD STROKE PAD'  OR TERR_3_TYPE = 'IHD PAD STROKE' THEN 'ST IHD PAD'
	ELSE TERR_3_TYPE
END AS TERR_3_TYPE,
AGE_TERR_3_DIAG,
AGE_TERR_3_ENTRY,
DEATH_DT,
AGE_AT_DEATH,
DEATH_EVENT,
CASE 
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 0 THEN NULL
	
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 1 THEN GP_LOSS_DATE
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 0 THEN MIGRATION_DATE	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 0 THEN DEATH_DT
	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 0 AND DEATH_DT < MIGRATION_DATE 		THEN DEATH_DT
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 0 AND DEATH_DT > MIGRATION_DATE 		THEN MIGRATION_DATE
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 1 AND DEATH_DT < GP_LOSS_DATE 		THEN DEATH_DT
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 1 AND DEATH_DT > GP_LOSS_DATE 		THEN GP_LOSS_DATE	
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND MIGRATION_DATE < GP_LOSS_DATE 	THEN MIGRATION_DATE
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND MIGRATION_DATE > GP_LOSS_DATE 	THEN GP_LOSS_DATE
	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND DEATH_DT < MIGRATION_DATE 	AND DEATH_DT < GP_LOSS_DATE 		THEN DEATH_DT	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND MIGRATION_DATE < DEATH_DT 	AND MIGRATION_DATE < GP_LOSS_DATE 	THEN MIGRATION_DATE	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND GP_LOSS_DATE < DEATH_DT 	AND GP_LOSS_DATE < MIGRATION_DATE 	THEN GP_LOSS_DATE
	ELSE '1999-12-31'
END AS CENSOR_DATE,
CASE 
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 0 THEN NULL
	
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 1 THEN 'GP_LOSS'
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 0 THEN 'MIGRATION'	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 0 THEN 'DEATH'
	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 0 AND DEATH_DT < MIGRATION_DATE 		THEN 'DEATH'
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 0 AND DEATH_DT > MIGRATION_DATE 		THEN 'MIGRATION'
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 1 AND DEATH_DT < GP_LOSS_DATE 		THEN 'DEATH'
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 0 AND CENSOR_GP_LOSS = 1 AND DEATH_DT > GP_LOSS_DATE 		THEN 'GP_LOSS'	
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND MIGRATION_DATE < GP_LOSS_DATE 	THEN 'MIGRATION'
	WHEN CENSOR_DEAD = 0 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND MIGRATION_DATE > GP_LOSS_DATE 	THEN 'GP_LOSS'
	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND DEATH_DT < MIGRATION_DATE 	AND DEATH_DT < GP_LOSS_DATE 		THEN 'DEATH'	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND MIGRATION_DATE < DEATH_DT 	AND MIGRATION_DATE < GP_LOSS_DATE 	THEN 'MIGRATION'	
	WHEN CENSOR_DEAD = 1 AND CENSOR_MIGRATION = 1 AND CENSOR_GP_LOSS = 1 AND GP_LOSS_DATE < DEATH_DT 	AND GP_LOSS_DATE < MIGRATION_DATE 	THEN 'GP_LOSS'
	ELSE 'ERROR'
END AS CENSOR_REASON,
CENSOR_DEAD,
CENSOR_MIGRATION,
MIGRATION_DATE,
CENSOR_GP_LOSS,
GP_LOSS_DATE,
PEDW_ADMIS_FIRST,
GP_ADMIS_FIRST,
INCIDENT,
PREVALENT,
HAS_GP_DIAG,
GP_DIAG_AFTER_PEDW_5,
GP_DIAG_AFTER_PEDW_30,
GP_DIAG_AFTER_PEDW_90,
GP_DIAG_AFTER_PEDW_365
FROM D

LEFT JOIN SAILW1483V.ETHN_1483 ETH
ON D.ALF_PE = ETH.ALF_PE
),

F AS
(
SELECT
ALF_PE,
GENDER,
CASE 
	WHEN AGE_ENTRY <= 4	 	THEN '4 and under' 
	WHEN AGE_ENTRY <= 9 	THEN '5 to 9' 
	WHEN AGE_ENTRY <= 14 	THEN '10 to 14'  
	WHEN AGE_ENTRY <= 19 	THEN '15 to 19'  
	WHEN AGE_ENTRY <= 24 	THEN '20 to 24'  
	WHEN AGE_ENTRY <= 29 	THEN '25 to 29'  
	WHEN AGE_ENTRY <= 34 	THEN '30 to 34'  
	WHEN AGE_ENTRY <= 39 	THEN '35 to 39'  
	WHEN AGE_ENTRY <= 44 	THEN '40 to 44'  
	WHEN AGE_ENTRY <= 49 	THEN '45 to 49'  
	WHEN AGE_ENTRY <= 54 	THEN '50 to 54'  
	WHEN AGE_ENTRY <= 59 	THEN '55 to 59'  
	WHEN AGE_ENTRY <= 64 	THEN '60 to 64'  
	WHEN AGE_ENTRY <= 69 	THEN '65 to 69'  
	WHEN AGE_ENTRY <= 74 	THEN '70 to 74' 
	WHEN AGE_ENTRY <= 79 	THEN '75 to 79'  
	WHEN AGE_ENTRY <= 84 	THEN '80 to 84'  
	WHEN AGE_ENTRY <= 89 	THEN '85 to 89'  
	WHEN AGE_ENTRY <= 94 	THEN '90 to 94'  
	WHEN AGE_ENTRY <= 99 	THEN '95 to 99'  
	WHEN AGE_ENTRY >= 100 	THEN '100 and over'
	ELSE NULL 
END AS ONS_AGE_BAND_FIRST_DIAG,
ETHNICITY,
WIMD_2019_QUINTILE,
FIRST_DATE,
AGE_DIAG,
AGE_ENTRY,
TYPE,
INDEX_MULTI_TERR,
INDEX_MULTI_TERR_TYPE,
HAS_2_TERR,
TERR_2_DATE,
TERR_2_TYPE,
AGE_TERR_2_DIAG,
AGE_TERR_2_ENTRY,
HAS_3_TERR,
TERR_3_DATE,
TERR_3_TYPE,
AGE_TERR_3_DIAG,
AGE_TERR_3_ENTRY,
DEATH_DT,
AGE_AT_DEATH,
DEATH_EVENT,
CASE 
	WHEN CENSOR_DATE < FIRST_DATE THEN DEATH_DT 
	ELSE CENSOR_DATE 
END AS CENSOR_DATE,
CASE 
	WHEN CENSOR_DATE < FIRST_DATE AND DEATH_DT IS NULL THEN NULL
	WHEN CENSOR_DATE < FIRST_DATE AND DEATH_DT IS NOT NULL THEN 'DEATH'
	ELSE CENSOR_REASON 
END AS CENSOR_REASON,
CENSOR_DEAD,
CENSOR_MIGRATION,
MIGRATION_DATE,
CENSOR_GP_LOSS,
GP_LOSS_DATE,
PEDW_ADMIS_FIRST,
GP_ADMIS_FIRST,
INCIDENT,
PREVALENT,
HAS_GP_DIAG,
GP_DIAG_AFTER_PEDW_5,
GP_DIAG_AFTER_PEDW_30,
GP_DIAG_AFTER_PEDW_90,
GP_DIAG_AFTER_PEDW_365
FROM E
),

G AS
(
SELECT
ALF_PE,
GENDER,
ONS_AGE_BAND_FIRST_DIAG,
ETHNICITY,
WIMD_2019_QUINTILE,
CASE
	WHEN CENSOR_DATE IS NULL THEN DAYS(SAILW1483V.END_DATE) - DAYS(FIRST_DATE)
	ELSE DAYS(CENSOR_DATE) - DAYS(FIRST_DATE) 
END AS INCLUSION_TOTAL,
CASE 	
	WHEN CENSOR_DATE IS NULL 		AND FIRST_DATE 	>= CAST(SAILW1483V.STUDY_START_DATE AS DATE) THEN DAYS(SAILW1483V.END_DATE) - DAYS(FIRST_DATE)
	WHEN CENSOR_DATE IS NULL 		AND FIRST_DATE 	<  CAST(SAILW1483V.STUDY_START_DATE AS DATE) THEN DAYS(SAILW1483V.END_DATE) - DAYS(CAST(SAILW1483V.STUDY_START_DATE AS DATE))
	WHEN CENSOR_DATE IS NOT NULL 	AND FIRST_DATE 	>= CAST(SAILW1483V.STUDY_START_DATE AS DATE) THEN DAYS(CENSOR_DATE) - DAYS(FIRST_DATE)
	WHEN CENSOR_DATE IS NOT NULL 	AND CENSOR_DATE >= CAST(SAILW1483V.STUDY_START_DATE AS DATE) THEN DAYS(CENSOR_DATE) - DAYS(CAST(SAILW1483V.STUDY_START_DATE AS DATE))
	ELSE 0
END AS INCLUSION_STUDY_PERIOD,	
FIRST_DATE,
AGE_DIAG,
AGE_ENTRY,
TYPE,
INDEX_MULTI_TERR,
INDEX_MULTI_TERR_TYPE,
HAS_2_TERR,
TERR_2_DATE,
TERR_2_TYPE,
AGE_TERR_2_DIAG,
AGE_TERR_2_ENTRY,
HAS_3_TERR,
TERR_3_DATE,
TERR_3_TYPE,
AGE_TERR_3_DIAG,
AGE_TERR_3_ENTRY,
DEATH_DT,
AGE_AT_DEATH,
DEATH_EVENT,
CENSOR_DATE,
CENSOR_REASON,
CENSOR_DEAD,
CENSOR_MIGRATION,
MIGRATION_DATE,
CENSOR_GP_LOSS,
GP_LOSS_DATE,
PEDW_ADMIS_FIRST,
GP_ADMIS_FIRST,
INCIDENT,
PREVALENT,
HAS_GP_DIAG,
GP_DIAG_AFTER_PEDW_5,
GP_DIAG_AFTER_PEDW_30,
GP_DIAG_AFTER_PEDW_90,
GP_DIAG_AFTER_PEDW_365
FROM F
),

H AS
(
SELECT
ALF_PE,
GENDER,
ONS_AGE_BAND_FIRST_DIAG,
ETHNICITY,
WIMD_2019_QUINTILE,
CASE
	WHEN INDEX_MULTI_TERR = 1 THEN INCLUSION_TOTAL - (DAYS(TERR_2_DATE) - DAYS(FIRST_DATE))
	ELSE INCLUSION_TOTAL
END AS INCLUSION_TOTAL,
CASE 
	WHEN INDEX_MULTI_TERR = 1 THEN INCLUSION_STUDY_PERIOD - (DAYS(TERR_2_DATE) - DAYS(FIRST_DATE))
	ELSE INCLUSION_STUDY_PERIOD
END AS INCLUSION_STUDY_PERIOD,	
FIRST_DATE,
AGE_DIAG,
AGE_ENTRY,
TYPE,
INDEX_MULTI_TERR,
INDEX_MULTI_TERR_TYPE,
HAS_2_TERR,
TERR_2_DATE,
TERR_2_TYPE,
AGE_TERR_2_DIAG,
AGE_TERR_2_ENTRY,
HAS_3_TERR,
TERR_3_DATE,
TERR_3_TYPE,
AGE_TERR_3_DIAG,
AGE_TERR_3_ENTRY,
DEATH_DT,
AGE_AT_DEATH,
DEATH_EVENT,
CENSOR_DATE,
CENSOR_REASON,
CENSOR_DEAD,
CENSOR_MIGRATION,
MIGRATION_DATE,
CENSOR_GP_LOSS,
GP_LOSS_DATE,
PEDW_ADMIS_FIRST,
GP_ADMIS_FIRST,
INCIDENT,
PREVALENT,
HAS_GP_DIAG,
GP_DIAG_AFTER_PEDW_5,
GP_DIAG_AFTER_PEDW_30,
GP_DIAG_AFTER_PEDW_90,
GP_DIAG_AFTER_PEDW_365
FROM G
)

SELECT
H.ALF_PE,
GENDER,
ONS_AGE_BAND_FIRST_DIAG,
ETHNICITY,
WIMD_2019_QUINTILE,
WEIGHT AS WEIGHT_CAT,
EVENT_VAL AS BMI,
INCLUSION_TOTAL,
INCLUSION_STUDY_PERIOD,	
H.FIRST_DATE,
YEAR(H.FIRST_DATE) AS FIRST_YEAR,
AGE_DIAG,
AGE_ENTRY,
TYPE,
INDEX_MULTI_TERR,
INDEX_MULTI_TERR_TYPE,
HAS_2_TERR,
TERR_2_DATE,
YEAR(TERR_2_DATE) AS TERR_2_YEAR,
TERR_2_TYPE,
AGE_TERR_2_DIAG,
AGE_TERR_2_ENTRY,
HAS_3_TERR,
TERR_3_DATE,
YEAR(TERR_3_DATE) AS TERR_3_YEAR,
TERR_3_TYPE,
AGE_TERR_3_DIAG,
AGE_TERR_3_ENTRY,
DEATH_DT,
YEAR(DEATH_DT) AS DEATH_YEAR,
AGE_AT_DEATH,
DEATH_EVENT,
CASE 
	WHEN CENSOR_DATE IS NULL THEN '2023-01-01' 
	ELSE CENSOR_DATE 
END AS CENSOR_DATE,
CASE 
	WHEN CENSOR_REASON IS NULL THEN 'STUDY END' 
	ELSE CENSOR_REASON 
END AS CENSOR_REASON,
CENSOR_DEAD,
CENSOR_MIGRATION,
MIGRATION_DATE,
CENSOR_GP_LOSS,
GP_LOSS_DATE,
CASE WHEN INCLUSION_STUDY_PERIOD >= 30 	THEN 1 ELSE 0 END AS STUDY_30D_FOLLOW_UP,
CASE WHEN INCLUSION_STUDY_PERIOD >= 60 	THEN 1 ELSE 0 END AS STUDY_60D_FOLLOW_UP,
CASE WHEN INCLUSION_STUDY_PERIOD >= 90 	THEN 1 ELSE 0 END AS STUDY_90D_FOLLOW_UP,
CASE WHEN INCLUSION_STUDY_PERIOD >= 120 THEN 1 ELSE 0 END AS STUDY_120D_FOLLOW_UP,
CASE WHEN INCLUSION_STUDY_PERIOD >= 365 THEN 1 ELSE 0 END AS STUDY_365D_FOLLOW_UP,
PEDW_ADMIS_FIRST,
GP_ADMIS_FIRST,
INCIDENT,
PREVALENT,
HAS_GP_DIAG,
GP_DIAG_AFTER_PEDW_5,
GP_DIAG_AFTER_PEDW_30,
GP_DIAG_AFTER_PEDW_90,
GP_DIAG_AFTER_PEDW_365
FROM H

LEFT JOIN SAILW1483V.TEMP_COHORT_BMI_BASELINE B
ON H.ALF_PE = B.ALF_PE
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.COHORT_MASTER_PRE_EXCL
	
WHERE PREVALENT = 1 AND FIRST_DATE >= '2010-01-01'	
	
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.COHORT_MASTER_PRE_EXCL;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.COHORT_MASTER_PRE_EXCL;
------------------------------------------
--
-- Characteristics of final study cohort at entry to the study - after exclusions
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.COHORT_MASTER_FINAL');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.COHORT_MASTER_FINAL
(
ALF_PE						BIGINT,
GENDER						INTEGER,
ONS_AGE_BAND				VARCHAR(12),
ETHNICITY					VARCHAR(255),
WIMD_2019_QUINTILE			INTEGER,
WEIGHT_CAT					VARCHAR(5),
BMI							DECIMAL(31,8),
INCLUSION_TOTAL				INTEGER,
INCLUSION_STUDY_PERIOD		INTEGER,	
FIRST_DATE					DATE,
FIRST_YEAR					INTEGER,
AGE_DIAG					INTEGER,
AGE_ENTRY					INTEGER,
TYPE						VARCHAR(15),
INDEX_MULTI_TERR			INTEGER,
INDEX_MULTI_TERR_TYPE		VARCHAR(15),
HAS_2_TERR					INTEGER,
TERR_2_DATE					DATE,
TERR_2_YEAR					INTEGER,
TERR_2_TYPE					VARCHAR(15),
AGE_TERR_2_DIAG				INTEGER,
AGE_TERR_2_ENTRY			INTEGER,
HAS_3_TERR					INTEGER,
TERR_3_DATE					DATE,
TERR_3_YEAR					INTEGER,
TERR_3_TYPE					VARCHAR(15),
AGE_TERR_3_DIAG				INTEGER,
AGE_TERR_3_ENTRY			INTEGER,
DEATH_DT					DATE,
DEATH_YEAR					INTEGER,
AGE_AT_DEATH				INTEGER,
DEATH_EVENT					INTEGER,
CENSOR_DATE					DATE,
CENSOR_REASON				VARCHAR(9),
CENSOR_DEAD					INTEGER,
CENSOR_MIGRATION			INTEGER,
MIGRATION_DATE				DATE,
CENSOR_GP_LOSS				INTEGER,
GP_LOSS_DATE				DATE,
STUDY_30D_FOLLOW_UP			INTEGER,
STUDY_60D_FOLLOW_UP			INTEGER,
STUDY_90D_FOLLOW_UP			INTEGER,
STUDY_120D_FOLLOW_UP		INTEGER,
STUDY_365D_FOLLOW_UP		INTEGER,
PEDW_ADMIS_FIRST			INTEGER,
GP_ADMIS_FIRST				INTEGER,
INCIDENT					INTEGER,
PREVALENT					INTEGER,
HAS_GP_DIAG					INTEGER,
GP_DIAG_AFTER_PEDW_5		INTEGER,
GP_DIAG_AFTER_PEDW_30		INTEGER,
GP_DIAG_AFTER_PEDW_90		INTEGER,
GP_DIAG_AFTER_PEDW_365		INTEGER,
INC_CAT						VARCHAR(30),
SMOKING_STATUS				CHARACTER(1),
DIABETES_BEFORE				INTEGER,
DEMENTIA_BEFORE				INTEGER,
MALIGNANT_BEFORE			INTEGER,
ASTHMA_BEFORE				INTEGER,
COPD_BEFORE					INTEGER,
RESP_BEFORE					INTEGER,
LIVER_BEFORE				INTEGER,
RENAL_BEFORE				INTEGER,
HF_BEFORE					INTEGER,
HYPERTENSION_BEFORE			INTEGER
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.COHORT_MASTER_FINAL

WITH PRE AS
(
SELECT 
C.* 
FROM SAILW1483V.COHORT_MASTER_PRE_EXCL C

JOIN SAILW1483V.COHORT_ALFS A
ON C.ALF_PE = A.ALF_PE
),

A AS
(
SELECT
ALF_PE,
CASE 
	WHEN PREVALENT = 1 THEN '2010-01-01'
	ELSE FIRST_DATE
END AS FIRST_DATE
FROM PRE
),

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
GP.EVENT_DT,
M.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_MORB_READ M
ON GP.EVENT_CD = M.READ_CODE

WHERE GP.EVENT_DT <= A.FIRST_DATE

ORDER BY A.ALF_PE, GP.EVENT_DT
),

C AS
(
SELECT
ALF_PE,
READ_TYPE
FROM B

GROUP BY ALF_PE,READ_TYPE
ORDER BY ALF_PE
),

D AS
(
SELECT 
ALF_PE,
READ_TYPE,
CASE WHEN READ_TYPE = 'DIABETES' 			THEN 1 ELSE 0 END AS DIABETES_BEFORE,
CASE WHEN READ_TYPE = 'DEMENTIA'			THEN 1 ELSE 0 END AS DEMENTIA_BEFORE,
CASE WHEN READ_TYPE = 'MALIGNANT' 			THEN 1 ELSE 0 END AS MALIGNANT_BEFORE,
CASE WHEN READ_TYPE = 'ASTHMA' 				THEN 1 ELSE 0 END AS ASTHMA_BEFORE,
CASE WHEN READ_TYPE = 'COPD' 				THEN 1 ELSE 0 END AS COPD_BEFORE,
CASE WHEN READ_TYPE IN ('COPD','ASTHMA')	THEN 1 ELSE 0 END AS RESP_BEFORE,
CASE WHEN READ_TYPE = 'LIVER_DISEASE' 		THEN 1 ELSE 0 END AS LIVER_BEFORE,
CASE WHEN READ_TYPE = 'CRF' 				THEN 1 ELSE 0 END AS RENAL_BEFORE,
CASE WHEN READ_TYPE = 'HEART_FAILURE' 		THEN 1 ELSE 0 END AS HF_BEFORE,
CASE WHEN READ_TYPE = 'HYPERTENSION' 		THEN 1 ELSE 0 END AS HYPERTENSION_BEFORE
FROM C
),

E AS
(
SELECT
ALF_PE,
MAX (DIABETES_BEFORE) 		AS DIABETES_BEFORE,
MAX (DEMENTIA_BEFORE) 		AS DEMENTIA_BEFORE,
MAX (MALIGNANT_BEFORE)		AS MALIGNANT_BEFORE,
MAX (ASTHMA_BEFORE) 		AS ASTHMA_BEFORE,
MAX (COPD_BEFORE) 			AS COPD_BEFORE,
MAX (RESP_BEFORE) 			AS RESP_BEFORE,
MAX (LIVER_BEFORE) 			AS LIVER_BEFORE,
MAX (RENAL_BEFORE) 			AS RENAL_BEFORE,
MAX (HF_BEFORE) 			AS HF_BEFORE,
MAX (HYPERTENSION_BEFORE) 	AS HYPERTENSION_BEFORE
FROM D

GROUP BY ALF_PE
ORDER BY ALF_PE
)

SELECT
PRE.*,
CASE 
	WHEN STUDY_365D_FOLLOW_UP = 1 THEN '>= 1 year follow-up'
	WHEN STUDY_365D_FOLLOW_UP = 0 AND CENSOR_REASON = 'DEATH' THEN 'Lost to death'
	ELSE 'Lost to follow-up'
END AS INC_CAT,
CASE 
	WHEN PREVALENT = 1 THEN P.SMOKING_STATUS 
	ELSE S.SMOKING_STATUS 
END AS SMOKING_STATUS,
CASE WHEN E.DIABETES_BEFORE IS NULL 		THEN 0 ELSE E.DIABETES_BEFORE 		END AS DIABETES_BEFORE,
CASE WHEN E.DEMENTIA_BEFORE IS NULL 		THEN 0 ELSE E.DEMENTIA_BEFORE 		END AS DEMENTIA_BEFORE,
CASE WHEN E.MALIGNANT_BEFORE IS NULL 		THEN 0 ELSE E.MALIGNANT_BEFORE 		END AS MALIGNANT_BEFORE,
CASE WHEN E.ASTHMA_BEFORE IS NULL 			THEN 0 ELSE E.ASTHMA_BEFORE 		END AS ASTHMA_BEFORE,
CASE WHEN E.COPD_BEFORE IS NULL 			THEN 0 ELSE E.COPD_BEFORE 			END AS COPD_BEFORE,
CASE WHEN E.RESP_BEFORE IS NULL 			THEN 0 ELSE E.RESP_BEFORE 			END AS RESP_BEFORE,
CASE WHEN E.LIVER_BEFORE IS NULL 			THEN 0 ELSE E.LIVER_BEFORE 			END AS LIVER_BEFORE,
CASE WHEN E.RENAL_BEFORE IS NULL 			THEN 0 ELSE E.RENAL_BEFORE 			END AS RENAL_BEFORE,
CASE WHEN E.HF_BEFORE IS NULL 				THEN 0 ELSE E.HF_BEFORE 			END AS HF_BEFORE,
CASE WHEN E.HYPERTENSION_BEFORE IS NULL 	THEN 0 ELSE E.HYPERTENSION_BEFORE 	END AS HYPERTENSION_BEFORE
FROM PRE

LEFT JOIN E
ON PRE.ALF_PE = E.ALF_PE

LEFT JOIN SAILW1483V.SMOKER_OUTPUT S
ON PRE.ALF_PE = S.PATIENT_ID 

LEFT JOIN SAILW1483V.SMOKER_OUTPUT_PREV P
ON PRE.ALF_PE = P.PATIENT_ID 
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.COHORT_MASTER_FINAL
	
	WHERE PREVALENT = 1 AND FIRST_YEAR >= 2010
	
	
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.COHORT_MASTER_FINAL;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.COHORT_MASTER_FINAL;
------------------------------------------   
--
-- BMI recorded in each year through the study period
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_COHORT_BMI_PREV');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_COHORT_BMI_PREV
(
ALF_PE						BIGINT,
YR							INTEGER,
EVENT_VAL					DECIMAL(31,8),
WEIGHT						VARCHAR(5)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_COHORT_BMI_PREV

WITH A AS
(
SELECT
ALF_PE,
FIRST_YR,
CENSOR_YR,
EVENT_DT,
EVENT_VAL,
WEIGHT
FROM
(
SELECT
B.ALF_PE,
FIRST_DATE,
YEAR(FIRST_DATE) AS FIRST_YR,
CENSOR_DATE,
YEAR(CENSOR_DATE) AS CENSOR_YR,
EVENT_DT,
EVENT_VAL,
WEIGHT,
ROW_NUMBER() OVER(PARTITION BY B.ALF_PE,YEAR(EVENT_DT) ORDER BY EVENT_DT DESC) AS RANK
FROM SAILW1483V.TEMP_COHORT_BMI B

JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON B.ALF_PE = F.ALF_PE

WHERE EVENT_DT > FIRST_DATE
AND (EVENT_DT <= CENSOR_DATE OR CENSOR_DATE IS NULL)
)
WHERE RANK = 1
),


--Use recurring CTE to duplicate rows based on the duration of follow-up
CTE(ALF_PE,FIRST_YR,CENSOR_YR,YR) AS
(
SELECT
	ALF_PE,
	FIRST_YEAR AS FIRST_YR,
	CASE WHEN YEAR(CENSOR_DATE) IS NULL THEN 2022 ELSE YEAR(CENSOR_DATE) END AS CENSOR_YR,
	FIRST_YEAR AS YR
FROM SAILW1483V.COHORT_MASTER_FINAL

UNION ALL

SELECT
	ALF_PE,
	FIRST_YR,
	CENSOR_YR,
	YR + 1
FROM CTE
WHERE YR <= CTE.CENSOR_YR-1
),

B AS
(
SELECT
CTE.ALF_PE,
CTE.YR,
EVENT_VAL,
WEIGHT
FROM CTE

LEFT JOIN A
ON CTE.ALF_PE = A.ALF_PE
AND CTE.YR = YEAR(EVENT_DT)

ORDER BY ALF_PE, YR
)

SELECT
ALF_PE,
YR,
FIRST_VALUE(EVENT_VAL) OVER(PARTITION BY VALUE_PARTITION ORDER BY ALF_PE,YR) AS EVENT_VAL,
FIRST_VALUE(WEIGHT) OVER(PARTITION BY VALUE_PARTITION_2 ORDER BY ALF_PE,YR) AS WEIGHT
FROM
(
SELECT
ALF_PE,
YR,
EVENT_VAL,
WEIGHT,
SUM(CASE WHEN EVENT_VAL IS NULL THEN 0 ELSE 1 END) OVER (ORDER BY ALF_PE,YR) AS VALUE_PARTITION,
SUM(CASE WHEN WEIGHT IS NULL THEN 0 ELSE 1 END) OVER (ORDER BY ALF_PE,YR) AS VALUE_PARTITION_2
FROM B
ORDER BY ALF_PE,YR
)
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_COHORT_BMI_PREV;
--
SELECT COUNT(*) FROM SAILW1483V.TEMP_COHORT_BMI_PREV;
--
SELECT COUNT(DISTINCT ALF_PE) FROM SAILW1483V.TEMP_COHORT_BMI_PREV;
------------------------------------------
--
-- Comorbidities and characteristics yearly through the study period
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.DYNAMIC_COHORT_MASTER');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.DYNAMIC_COHORT_MASTER
(
ALF_PE						BIGINT,
GENDER						INTEGER,
ETHNICITY					VARCHAR(15),
YEAR						INTEGER,
AGE							INTEGER,
WEIGHT_CAT					VARCHAR(5),
BMI							DECIMAL(31,8),
TYPE						VARCHAR(15),
DIABETES					INTEGER,
DEMENTIA					INTEGER,
RESP						INTEGER,
LIVER						INTEGER,
CKD							INTEGER,
HF							INTEGER,
HYPERTENSION				INTEGER
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.DYNAMIC_COHORT_MASTER

WITH X AS
(
SELECT
ALF_PE,
FIRST_DATE,
YEAR(FIRST_DATE) AS FIRST_YR,
CENSOR_DATE,
YEAR(CENSOR_DATE) AS CENSOR_YR
FROM SAILW1483V.COHORT_MASTER_FINAL
),

--Use recurring CTE to duplicate rows based on the duration of follow-up
CTE(ALF_PE,FIRST_DATE,FIRST_YR,CENSOR_DATE,CENSOR_YR,YR) AS
(
SELECT
	ALF_PE,
	FIRST_DATE,
	FIRST_YR,
	CENSOR_DATE,
	CASE WHEN CENSOR_YR IS NULL THEN 2023 ELSE CENSOR_YR END AS CENSOR_YR,
	FIRST_YR AS YR
FROM X

UNION ALL

SELECT
	ALF_PE,
	FIRST_DATE,
	FIRST_YR,
	CENSOR_DATE,
	CENSOR_YR,
	YR + 1
FROM CTE
WHERE YR <= CTE.CENSOR_YR-2
),

--SELECT * FROM CTE ORDER BY ALF_PE, YR

A AS
(
SELECT
	CTE.ALF_PE,
	F.GENDER,
	F.ETHNICITY,
	CAST(CTE.YR || '-01-01' AS DATE) AS YR,
	B.WEIGHT AS WEIGHT_CAT,
	B.EVENT_VAL AS BMI,	
	CTE.FIRST_DATE,
	TYPE AS FIRST_TERR,
	F.TERR_2_DATE AS POLY_DATE,	
	CASE WHEN YEAR(F.TERR_2_DATE) <= CTE.YR THEN 'POLY' ELSE TYPE END AS TYPE,
	CASE WHEN CTE.CENSOR_DATE IS NULL THEN CAST('2023-01-01' AS DATE) ELSE CTE.CENSOR_DATE END AS CENSOR_DATE,
	F.AGE_DIAG,
	F.AGE_ENTRY,
	F.AGE_TERR_2_DIAG  AS AGE_POLY_DIAG,
	F.AGE_TERR_2_ENTRY AS AGE_POLY_ENTRY,
	F.AGE_AT_DEATH,
	F.INCIDENT,
	F.PREVALENT
FROM CTE

JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON CTE.ALF_PE = F.ALF_PE

LEFT JOIN SAILW1483V.TEMP_COHORT_BMI_PREV B
ON CTE.ALF_PE = B.ALF_PE
AND CTE.YR = B.YR

WHERE CTE.YR >= 2010

ORDER BY CTE.ALF_PE,CTE.YR
)

--SELECT * FROM A
,

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
A.CENSOR_DATE,
A.YR,
GP.EVENT_DT,
M.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_MORB_READ M
ON GP.EVENT_CD = M.READ_CODE

WHERE GP.EVENT_DT BETWEEN A.FIRST_DATE AND A.YR

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

C AS
(
SELECT
ALF_PE,
FIRST_DATE,
CENSOR_DATE,
YR,
EVENT_DT,
READ_TYPE
FROM 
(
SELECT
*,
ROW_NUMBER() OVER(PARTITION BY ALF_PE, READ_TYPE ORDER BY EVENT_DT) AS RANK
FROM B

WHERE READ_TYPE IN('DIABETES','DEMENTIA','MALIGNANT','ASTHMA','COPD','LIVER_DISEASE','CRF','HEART_FAILURE','HYPERTENSION')
)
WHERE RANK = 1
)

--SELECT * FROM C
,

D AS
(
SELECT
ALF_PE,
MAX (GENDER)				AS GENDER,
MAX (ETHNICITY)				AS ETHNICITY,
YR,
MAX (WEIGHT_CAT) 			AS WEIGHT_CAT,
MAX (BMI) 					AS BMI,	
MAX (FIRST_DATE) 			AS FIRST_DATE,
MAX (FIRST_TERR) 			AS FIRST_TERR,
MAX (POLY_DATE) 			AS POLY_DATE,	
MAX (TYPE) 					AS TYPE,
MAX (CENSOR_DATE) 			AS CENSOR_DATE,
MAX (AGE_DIAG) 				AS AGE_DIAG,
MAX (AGE_ENTRY) 			AS AGE_ENTRY,
MAX (AGE_POLY_DIAG) 		AS AGE_POLY_DIAG,
MAX (AGE_POLY_ENTRY) 		AS AGE_POLY_ENTRY,
MAX (AGE_AT_DEATH) 			AS AGE_AT_DEATH,
MAX (INCIDENT) 				AS INCIDENT,
MAX (PREVALENT) 			AS PREVALENT,
MAX (DIABETES) 				AS DIABETES,
MAX (DIABETES_DT) 			AS DIABETES_DT,
MAX (DEMENTIA) 				AS DEMENTIA,
MAX (DEMENTIA_DT) 			AS DEMENTIA_DT,
MAX (RESP) 					AS RESP,
MAX (RESP_DT) 				AS RESP_DT,
MAX (LIVER) 				AS LIVER,
MAX (LIVER_DT) 				AS LIVER_DT,
MAX (CKD) 					AS CKD,
MAX (CKD_DT) 				AS CKD_DT,
MAX (HF) 					AS HF,
MAX (HF_DT) 				AS HF_DT,
MAX (HYPERTENSION) 			AS HYPERTENSION,
MAX (HYPERTENSION_DT) 		AS HYPERTENSION_DT
FROM 
(
SELECT 
A.*,
C.READ_TYPE,
CASE WHEN READ_TYPE = 'DIABETES' 			THEN 1 ELSE 0 END AS DIABETES,
CASE WHEN READ_TYPE = 'DIABETES' 			THEN EVENT_DT ELSE NULL END AS DIABETES_DT,
CASE WHEN READ_TYPE = 'DEMENTIA'			THEN 1 ELSE 0 END AS DEMENTIA,
CASE WHEN READ_TYPE = 'DEMENTIA' 			THEN EVENT_DT ELSE NULL END AS DEMENTIA_DT,
CASE WHEN READ_TYPE IN ('COPD','ASTHMA')	THEN 1 ELSE 0 END AS RESP,
CASE WHEN READ_TYPE IN ('COPD','ASTHMA')	THEN EVENT_DT ELSE NULL END AS RESP_DT,
CASE WHEN READ_TYPE = 'LIVER_DISEASE' 		THEN 1 ELSE 0 END AS LIVER,
CASE WHEN READ_TYPE = 'LIVER_DISEASE'		THEN EVENT_DT ELSE NULL END AS LIVER_DT,
CASE WHEN READ_TYPE = 'CRF' 				THEN 1 ELSE 0 END AS CKD,
CASE WHEN READ_TYPE = 'CRF'					THEN EVENT_DT ELSE NULL END AS CKD_DT,
CASE WHEN READ_TYPE = 'HEART_FAILURE' 		THEN 1 ELSE 0 END AS HF,
CASE WHEN READ_TYPE = 'HEART_FAILURE'		THEN EVENT_DT ELSE NULL END AS HF_DT,
CASE WHEN READ_TYPE = 'HYPERTENSION' 		THEN 1 ELSE 0 END AS HYPERTENSION,
CASE WHEN READ_TYPE = 'HYPERTENSION'		THEN EVENT_DT ELSE NULL END AS HYPERTENSION_DT
FROM A

LEFT JOIN C
ON A.ALF_PE = C.ALF_PE
AND A.YR BETWEEN C.EVENT_DT AND C.CENSOR_DATE
)
GROUP BY ALF_PE,YR
)

SELECT 
ALF_PE,
GENDER,
ETHNICITY,
YEAR(YR) AS YEAR,
(YEAR(YR) - 2010) + AGE_ENTRY AS AGE,
WEIGHT_CAT,
BMI,	
TYPE,
DIABETES,
DEMENTIA,
RESP,
LIVER,
CKD,
HF,
HYPERTENSION
FROM D
ORDER BY ALF_PE, YR
;
------------------------------------------
--
SELECT * FROM SAILW1483V.DYNAMIC_COHORT_MASTER;
--
SELECT COUNT(DISTINCT ALF_PE) FROM SAILW1483V.DYNAMIC_COHORT_MASTER;
------------------------------------------
--
-- Comorbidities and characteristics yearly through the study period in those with > 1 year follow-up
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.DYNAMIC_COHORT_MASTER_365');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.DYNAMIC_COHORT_MASTER_365
(
ALF_PE						BIGINT,
GENDER						INTEGER,
ETHNICITY					VARCHAR(15),
YEAR						INTEGER,
AGE							INTEGER,
WEIGHT_CAT					VARCHAR(5),
BMI							DECIMAL(31,8),
TYPE						VARCHAR(15),
DIABETES					INTEGER,
DEMENTIA					INTEGER,
RESP						INTEGER,
LIVER						INTEGER,
CKD							INTEGER,
HF							INTEGER,
HYPERTENSION				INTEGER
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.DYNAMIC_COHORT_MASTER_365

SELECT
M.*
FROM SAILW1483V.DYNAMIC_COHORT_MASTER M

JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON M.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
;
------------------------------------------
--
SELECT * FROM SAILW1483V.DYNAMIC_COHORT_MASTER_365;
--
SELECT COUNT(DISTINCT ALF_PE) FROM SAILW1483V.DYNAMIC_COHORT_MASTER_365;
------------------------------------------
--
-- Diagnoses made in primary vs secondary care throughout the study period
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.COHORT_DIAG_SPLIT');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.COHORT_DIAG_SPLIT
(
FIRST_YEAR					INTEGER,
TYPE						VARCHAR(15),
DIAG						VARCHAR(15),
COUNT_PCT					VARCHAR(15)
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.COHORT_DIAG_SPLIT

WITH A AS
(
SELECT 
	FIRST_YEAR,
	'ALL' AS TYPE,
	CASE WHEN PEDW_ADMIS_FIRST = 1 THEN 'PEDW' ELSE 'GP' END AS DIAG,
	ALF_PE
FROM 
	SAILW1483V.COHORT_MASTER_FINAL
	
WHERE INCIDENT = 1

UNION

SELECT 
	FIRST_YEAR,
	TYPE,
	CASE WHEN PEDW_ADMIS_FIRST = 1 THEN 'PEDW' ELSE 'GP' END AS DIAG,
	ALF_PE
FROM 
	SAILW1483V.COHORT_MASTER_FINAL
	
WHERE INCIDENT = 1
)	
,

B AS
(
SELECT
	FIRST_YEAR,
	TYPE,
	DIAG,
	COUNT(ALF_PE) AS COUNT
FROM A

GROUP BY FIRST_YEAR, TYPE, DIAG
ORDER BY FIRST_YEAR, TYPE, DIAG
)
,

C AS
(
SELECT
	FIRST_YEAR,
	TYPE,
	COUNT(ALF_PE) AS COUNT
FROM A

GROUP BY FIRST_YEAR, TYPE
ORDER BY FIRST_YEAR, TYPE
)
,

D AS
(
SELECT
B.FIRST_YEAR,
B.TYPE,
B.DIAG,
B.COUNT,
ROUND((B.COUNT / CAST(C.COUNT AS DECIMAL(31,8))*100),1) AS PCT
FROM B

LEFT JOIN C
ON B.FIRST_YEAR = C.FIRST_YEAR
AND B.TYPE = C.TYPE
)

SELECT
FIRST_YEAR,
TYPE,
DIAG,
COUNT || ' (' || CAST(PCT AS VARCHAR(4)) || '%)' AS COUNT_PCT
FROM D
;
------------------------------------------   

SELECT * FROM SAILW1483V.COHORT_DIAG_SPLIT;

------------------------------------------   
