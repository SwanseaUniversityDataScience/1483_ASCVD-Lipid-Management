--
--
------------------------------------------
--
-- Script:			13_STATISTICAL_ANALYSIS.sql
-- SAIL project:	1483 - Cardiovascular disease risk prediction and optimisation of risk factor management
--
-- About:			Descriptive and statistical analysis
-- Author:			Daniel King
------------------------------------------
--
-- Yearly denominator
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_DENOM_YR');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_DENOM_YR
(
		 IN_2010		INTEGER,
		 IN_2011		INTEGER,
		 IN_2012		INTEGER,
		 IN_2013		INTEGER,
		 IN_2014		INTEGER,
		 IN_2015		INTEGER,
		 IN_2016		INTEGER,
		 IN_2017		INTEGER,
		 IN_2018		INTEGER,
		 IN_2019		INTEGER,
		 IN_2020		INTEGER,
		 IN_2021		INTEGER,
		 IN_2022		INTEGER	
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_DENOM_YR

WITH ALFS AS
(
SELECT 
W.ALF_PE,
MIN(WDS.WOB) AS WOB
FROM SAILW1483V.PREP_ALF_WDSD W

LEFT JOIN SAILW1483V.WDSD_DATA WDS 
ON W.ALF_PE = WDS.ALF_PE

GROUP BY W.ALF_PE
)

--SELECT COUNT(*) FROM ALFS
--SELECT COUNT(DISTINCT ALF_PE) FROM ALFS
,

CONDITIONS AS
(
SELECT
DISTINCT A.ALF_PE,
CASE 
	WHEN 	 ((DAYS('2010-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2010-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2010-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2010-01-01' >= W.START_DATE AND W.END_DATE = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2010-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2010-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2010,
CASE 
	WHEN 	 ((DAYS('2011-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2011-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2011-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2011-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2011-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2011-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2011,
CASE 
	WHEN 	 ((DAYS('2012-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2012-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2012-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2012-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2012-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2012-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2012,
CASE 
	WHEN 	 ((DAYS('2013-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2013-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2013-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2013-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2013-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2013-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2013,
CASE 
	WHEN 	 ((DAYS('2014-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2014-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2014-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2014-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2014-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2014-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2014,
CASE 
	WHEN 	 ((DAYS('2015-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2015-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2015-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2015-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2015-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2015-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2015,
CASE 
	WHEN 	 ((DAYS('2016-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2016-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2016-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2016-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2016-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2016-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2016,
CASE 
	WHEN 	 ((DAYS('2017-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2017-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2017-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2017-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2017-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2017-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2017,
CASE 
	WHEN 	 ((DAYS('2018-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2018-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2018-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2018-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2018-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2018-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2018,
CASE 
	WHEN 	 ((DAYS('2019-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2019-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2019-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2019-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2019-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2019-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2019,
CASE 
	WHEN 	 ((DAYS('2020-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2020-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2020-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2020-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2020-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2020-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2020,
CASE 
	WHEN 	 ((DAYS('2021-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2021-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2021-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2021-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2021-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2021-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2021,
CASE 
	WHEN 	 ((DAYS('2022-01-01') - DAYS(A.WOB))/365 >= 18) 
		AND  (('2022-01-01' <= ADDE.DEATH_DT) OR ADDE.DEATH_DT IS NULL) 
		AND  (('2022-01-01' BETWEEN W.START_DATE AND W.END_DATE) OR ('2022-01-01' >= W.START_DATE AND W.END_DATE  = '9999-01-01')) 
		AND  (G.GP_DATA_FLAG = 1 AND (('2022-01-01' BETWEEN G.START_DATE AND G.END_DATE) OR ('2022-01-01' >= G.START_DATE AND G.END_DATE >= SAILW1483V.END_DATE))) 
	THEN 1 
	ELSE 0 
END AS IN_2022

FROM ALFS A

LEFT JOIN SAILW1483V.ADDE_DATA ADDE
ON A.ALF_PE = ADDE.ALF_PE

LEFT JOIN SAILW1483V.WDSD_WELSH_RES_DATA W
ON A.ALF_PE = W.ALF_PE

LEFT JOIN SAILW1483V.GP_NON_SAIL_REG_DATA G
ON A.ALF_PE = G.ALF_PE
)

--SELECT * FROM CONDITIONS
--SELECT COUNT(*) FROM CONDITIONS

SELECT
SUM(IN_2010) AS IN_2010,
SUM(IN_2011) AS IN_2011,
SUM(IN_2012) AS IN_2012,
SUM(IN_2013) AS IN_2013,
SUM(IN_2014) AS IN_2014,
SUM(IN_2015) AS IN_2015,
SUM(IN_2016) AS IN_2016,
SUM(IN_2017) AS IN_2017,
SUM(IN_2018) AS IN_2018,
SUM(IN_2019) AS IN_2019,
SUM(IN_2020) AS IN_2020,
SUM(IN_2021) AS IN_2021,
SUM(IN_2022) AS IN_2022
FROM CONDITIONS 
;
COMMIT;
------------------------------------------
--
SELECT * FROM SAILW1483V.PREP_DENOM_YR;
------------------------------------------  
--
-- Yearly incidence
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_INC_PER_YEAR');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_INC_PER_YEAR
(
	YEAR				INTEGER,
	POLY				INTEGER,
	ST					INTEGER,
	IHD					INTEGER,
	PAD					INTEGER,
	TOTAL				INTEGER	
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_INC_PER_YEAR
--
-- This query returns the first diagnosis of any of the categories of ASCVD. 
-- If more than 1 territory was diagnosed in the first year then they will present as that multi-territory category
--
WITH A AS
(
SELECT 
ALF_PE,
FIRST_YEAR,
TERR_2_YEAR,
TERR_3_YEAR,
CASE WHEN INDEX_MULTI_TERR = 1 THEN INDEX_MULTI_TERR_TYPE ELSE TYPE END AS TERR_1_TYPE,
TERR_2_TYPE,
TERR_3_TYPE
FROM SAILW1483V.COHORT_MASTER_FINAL

WHERE YEAR(FIRST_DATE) >= 2010
),

B AS
(
SELECT
FIRST_YEAR AS YEAR,
CASE WHEN TERR_1_TYPE = 'ST IHD' 		THEN 1 ELSE 0 END AS ST_IHD,
CASE WHEN TERR_1_TYPE = 'PAD ST' 		THEN 1 ELSE 0 END AS PAD_ST,
CASE WHEN TERR_1_TYPE = 'IHD PAD' 		THEN 1 ELSE 0 END AS IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST IHD PAD' 	THEN 1 ELSE 0 END AS ST_IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST' 			THEN 1 ELSE 0 END AS ST,
CASE WHEN TERR_1_TYPE = 'IHD' 			THEN 1 ELSE 0 END AS IHD,
CASE WHEN TERR_1_TYPE = 'PAD' 			THEN 1 ELSE 0 END AS PAD
FROM A
)


SELECT
YEAR,
SUM(ST_IHD) + SUM(PAD_ST) + SUM(IHD_PAD) + SUM(ST_IHD_PAD) AS POLY,
SUM(ST) AS ST,
SUM(IHD) AS IHD,
SUM(PAD) AS PAD,
SUM(ST_IHD) + SUM(PAD_ST) + SUM(IHD_PAD) + SUM(ST_IHD_PAD) + SUM(ST) + SUM(IHD) + SUM(PAD) AS TOTAL
FROM B
GROUP BY YEAR
;
COMMIT;
------------------------------------------
--
SELECT * FROM SAILW1483V.PREP_INC_PER_YEAR
ORDER BY YEAR;
------------------------------------------  
--
-- Incidence per year - by age
--
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_INC_PER_YEAR_AGES');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_INC_PER_YEAR_AGES
(
	YEAR				INTEGER,
	AGE_CAT				VARCHAR(10),
	POLY				INTEGER,
	ST					INTEGER,
	IHD					INTEGER,
	PAD					INTEGER,
	TOTAL				INTEGER	
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_INC_PER_YEAR_AGES
--
WITH A AS
(
SELECT 
ALF_PE,
FIRST_YEAR,
TERR_2_YEAR,
TERR_3_YEAR,
CASE WHEN INDEX_MULTI_TERR = 1 THEN INDEX_MULTI_TERR_TYPE ELSE TYPE END AS TERR_1_TYPE,
TERR_2_TYPE,
TERR_3_TYPE,
CASE 
	WHEN AGE_DIAG < 60 THEN '< 60'
	WHEN AGE_DIAG BETWEEN 60 AND 85 THEN '60 - 85'
	WHEN AGE_DIAG > 85 THEN '> 85'
	ELSE NULL
END AS AGE_CAT

FROM SAILW1483V.COHORT_MASTER_FINAL

WHERE YEAR(FIRST_DATE) >= 2010
),

B AS
(
SELECT
ALF_PE,
FIRST_YEAR AS YEAR,
CASE WHEN TERR_1_TYPE = 'ST IHD' 		THEN 1 ELSE 0 END AS ST_IHD,
CASE WHEN TERR_1_TYPE = 'PAD ST' 		THEN 1 ELSE 0 END AS PAD_ST,
CASE WHEN TERR_1_TYPE = 'IHD PAD' 		THEN 1 ELSE 0 END AS IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST IHD PAD' 	THEN 1 ELSE 0 END AS ST_IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST' 			THEN 1 ELSE 0 END AS ST,
CASE WHEN TERR_1_TYPE = 'IHD' 			THEN 1 ELSE 0 END AS IHD,
CASE WHEN TERR_1_TYPE = 'PAD' 			THEN 1 ELSE 0 END AS PAD,
AGE_CAT
FROM A

WHERE AGE_CAT = '< 60'

UNION

SELECT
ALF_PE,
FIRST_YEAR AS YEAR,
CASE WHEN TERR_1_TYPE = 'ST IHD' 		THEN 1 ELSE 0 END AS ST_IHD,
CASE WHEN TERR_1_TYPE = 'PAD ST' 		THEN 1 ELSE 0 END AS PAD_ST,
CASE WHEN TERR_1_TYPE = 'IHD PAD' 		THEN 1 ELSE 0 END AS IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST IHD PAD' 	THEN 1 ELSE 0 END AS ST_IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST' 			THEN 1 ELSE 0 END AS ST,
CASE WHEN TERR_1_TYPE = 'IHD' 			THEN 1 ELSE 0 END AS IHD,
CASE WHEN TERR_1_TYPE = 'PAD' 			THEN 1 ELSE 0 END AS PAD,
AGE_CAT
FROM A

WHERE AGE_CAT = '60 - 85'

UNION

SELECT
ALF_PE,
FIRST_YEAR AS YEAR,
CASE WHEN TERR_1_TYPE = 'ST IHD' 		THEN 1 ELSE 0 END AS ST_IHD,
CASE WHEN TERR_1_TYPE = 'PAD ST' 		THEN 1 ELSE 0 END AS PAD_ST,
CASE WHEN TERR_1_TYPE = 'IHD PAD' 		THEN 1 ELSE 0 END AS IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST IHD PAD' 	THEN 1 ELSE 0 END AS ST_IHD_PAD,
CASE WHEN TERR_1_TYPE = 'ST' 			THEN 1 ELSE 0 END AS ST,
CASE WHEN TERR_1_TYPE = 'IHD' 			THEN 1 ELSE 0 END AS IHD,
CASE WHEN TERR_1_TYPE = 'PAD' 			THEN 1 ELSE 0 END AS PAD,
AGE_CAT
FROM A

WHERE AGE_CAT = '> 85'
)

SELECT
YEAR,
AGE_CAT,
SUM(ST_IHD) + SUM(PAD_ST) + SUM(IHD_PAD) + SUM(ST_IHD_PAD) AS POLY,
SUM(ST) AS ST,
SUM(IHD) AS IHD,
SUM(PAD) AS PAD,
SUM(ST_IHD) + SUM(PAD_ST) + SUM(IHD_PAD) + SUM(ST_IHD_PAD) + SUM(ST) + SUM(IHD) + SUM(PAD) AS TOTAL
FROM B
GROUP BY YEAR, AGE_CAT
ORDER BY YEAR, AGE_CAT
;
COMMIT;
------------------------------------------
--
SELECT * FROM SAILW1483V.PREP_INC_PER_YEAR_AGES
ORDER BY YEAR;
--
------------------------------------------
--
-- Yearly prevalence
------------------------------------------     
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_PREV_PER_YEAR');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_PREV_PER_YEAR
(
YEAR		INTEGER,
TERR		VARCHAR(12),
COUNT		INTEGER
)
;
COMMIT;
----------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_PREV_PER_YEAR

WITH A AS
(
SELECT
ALF_PE,
YEAR(FIRST_DATE) AS FIRST_YR,
YEAR(CENSOR_DATE) AS CENSOR_YR,
CASE WHEN INDEX_MULTI_TERR = 1 THEN 'POLY' ELSE TYPE END AS TYPE,
YEAR(TERR_2_DATE) AS POLY_YR
FROM SAILW1483V.COHORT_MASTER_FINAL
ORDER BY ALF_PE
),

B AS
(
SELECT
ALF_PE,
CASE
	WHEN FIRST_YR <= 2010 AND (CENSOR_YR >= 2010 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2010) THEN TYPE
	WHEN FIRST_YR <= 2010 AND (CENSOR_YR >= 2010 OR CENSOR_YR IS NULL) AND POLY_YR <= 2010 THEN 'POLY'
	ELSE NULL
END AS TERR_2010,
CASE
	WHEN FIRST_YR <= 2011 AND (CENSOR_YR >= 2011 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2011) THEN TYPE
	WHEN FIRST_YR <= 2011 AND (CENSOR_YR >= 2011 OR CENSOR_YR IS NULL) AND POLY_YR <= 2011 THEN 'POLY'
	ELSE NULL
END AS TERR_2011,
CASE
	WHEN FIRST_YR <= 2012 AND (CENSOR_YR >= 2012 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2012) THEN TYPE
	WHEN FIRST_YR <= 2012 AND (CENSOR_YR >= 2012 OR CENSOR_YR IS NULL) AND POLY_YR <= 2012 THEN 'POLY'
	ELSE NULL
END AS TERR_2012,
CASE
	WHEN FIRST_YR <= 2013 AND (CENSOR_YR >= 2013 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2013) THEN TYPE
	WHEN FIRST_YR <= 2013 AND (CENSOR_YR >= 2013 OR CENSOR_YR IS NULL) AND POLY_YR <= 2013 THEN 'POLY'
	ELSE NULL
END AS TERR_2013,
CASE
	WHEN FIRST_YR <= 2014 AND (CENSOR_YR >= 2014 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2014) THEN TYPE
	WHEN FIRST_YR <= 2014 AND (CENSOR_YR >= 2014 OR CENSOR_YR IS NULL) AND POLY_YR <= 2014 THEN 'POLY'
	ELSE NULL
END AS TERR_2014,
CASE
	WHEN FIRST_YR <= 2015 AND (CENSOR_YR >= 2015 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2015) THEN TYPE
	WHEN FIRST_YR <= 2015 AND (CENSOR_YR >= 2015 OR CENSOR_YR IS NULL) AND POLY_YR <= 2015 THEN 'POLY'
	ELSE NULL
END AS TERR_2015,
CASE
	WHEN FIRST_YR <= 2016 AND (CENSOR_YR >= 2016 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2016) THEN TYPE
	WHEN FIRST_YR <= 2016 AND (CENSOR_YR >= 2016 OR CENSOR_YR IS NULL) AND POLY_YR <= 2016 THEN 'POLY'
	ELSE NULL
END AS TERR_2016,
CASE
	WHEN FIRST_YR <= 2017 AND (CENSOR_YR >= 2017 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2017) THEN TYPE
	WHEN FIRST_YR <= 2017 AND (CENSOR_YR >= 2017 OR CENSOR_YR IS NULL) AND POLY_YR <= 2017 THEN 'POLY'
	ELSE NULL
END AS TERR_2017,
CASE
	WHEN FIRST_YR <= 2018 AND (CENSOR_YR >= 2018 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2018) THEN TYPE
	WHEN FIRST_YR <= 2018 AND (CENSOR_YR >= 2018 OR CENSOR_YR IS NULL) AND POLY_YR <= 2018 THEN 'POLY'
	ELSE NULL
END AS TERR_2018,
CASE
	WHEN FIRST_YR <= 2019 AND (CENSOR_YR >= 2019 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2019) THEN TYPE
	WHEN FIRST_YR <= 2019 AND (CENSOR_YR >= 2019 OR CENSOR_YR IS NULL) AND POLY_YR <= 2019 THEN 'POLY'
	ELSE NULL
END AS TERR_2019,
CASE
	WHEN FIRST_YR <= 2020 AND (CENSOR_YR >= 2020 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2020) THEN TYPE
	WHEN FIRST_YR <= 2020 AND (CENSOR_YR >= 2020 OR CENSOR_YR IS NULL) AND POLY_YR <= 2020 THEN 'POLY'
	ELSE NULL
END AS TERR_2020,
CASE
	WHEN FIRST_YR <= 2021 AND (CENSOR_YR >= 2021 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2021) THEN TYPE
	WHEN FIRST_YR <= 2021 AND (CENSOR_YR >= 2021 OR CENSOR_YR IS NULL) AND POLY_YR <= 2021 THEN 'POLY'
	ELSE NULL
END AS TERR_2021,
CASE
	WHEN FIRST_YR <= 2022 AND (CENSOR_YR >= 2022 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2022) THEN TYPE
	WHEN FIRST_YR <= 2022 AND (CENSOR_YR >= 2022 OR CENSOR_YR IS NULL) AND POLY_YR <= 2022 THEN 'POLY'
	ELSE NULL
END AS TERR_2022,
CASE
	WHEN FIRST_YR <= 2023 AND (CENSOR_YR >= 2023 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2023) THEN TYPE
	WHEN FIRST_YR <= 2023 AND (CENSOR_YR >= 2023 OR CENSOR_YR IS NULL) AND POLY_YR <= 2023 THEN 'POLY'
	ELSE NULL
END AS TERR_2023
FROM A
),

--SELECT * FROM B

C AS
(
SELECT
2010 AS YEAR,
TERR_2010 TERR,
COUNT(TERR_2010) AS COUNT
FROM B
GROUP BY TERR_2010

UNION

SELECT
2011 AS YEAR,
TERR_2011 TERR,
COUNT(TERR_2011) AS COUNT
FROM B
GROUP BY TERR_2011

UNION

SELECT
2012 AS YEAR,
TERR_2012 TERR,
COUNT(TERR_2012) AS COUNT
FROM B
GROUP BY TERR_2012

UNION

SELECT
2013 AS YEAR,
TERR_2013 TERR,
COUNT(TERR_2013) AS COUNT
FROM B
GROUP BY TERR_2013

UNION

SELECT
2014 AS YEAR,
TERR_2014 TERR,
COUNT(TERR_2014) AS COUNT
FROM B
GROUP BY TERR_2014

UNION

SELECT
2015 AS YEAR,
TERR_2015 TERR,
COUNT(TERR_2015) AS COUNT
FROM B
GROUP BY TERR_2015

UNION

SELECT
2016 AS YEAR,
TERR_2016 TERR,
COUNT(TERR_2016) AS COUNT
FROM B
GROUP BY TERR_2016

UNION

SELECT
2017 AS YEAR,
TERR_2017 TERR,
COUNT(TERR_2017) AS COUNT
FROM B
GROUP BY TERR_2017

UNION

SELECT
2018 AS YEAR,
TERR_2018 TERR,
COUNT(TERR_2018) AS COUNT
FROM B
GROUP BY TERR_2018

UNION

SELECT
2019 AS YEAR,
TERR_2019 TERR,
COUNT(TERR_2019) AS COUNT
FROM B
GROUP BY TERR_2019

UNION

SELECT
2020 AS YEAR,
TERR_2020 TERR,
COUNT(TERR_2020) AS COUNT
FROM B
GROUP BY TERR_2020

UNION

SELECT
2021 AS YEAR,
TERR_2021 TERR,
COUNT(TERR_2021) AS COUNT
FROM B
GROUP BY TERR_2021

UNION

SELECT
2022 AS YEAR,
TERR_2022 TERR,
COUNT(TERR_2022) AS COUNT
FROM B
GROUP BY TERR_2022

UNION

SELECT
2023 AS YEAR,
TERR_2023 TERR,
COUNT(TERR_2023) AS COUNT
FROM B
GROUP BY TERR_2023
)

SELECT
*
FROM C
WHERE TERR IS NOT NULL

ORDER BY YEAR, TERR
;
------------------------------------------  
--
SELECT * FROM SAILW1483V.PREP_PREV_PER_YEAR;
------------------------------------------  
--
-- Prevalence per year by age
--
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_PREV_PER_YEAR_AGES');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_PREV_PER_YEAR_AGES
(
YEAR		INTEGER,
TERR		VARCHAR(12),
AGE			VARCHAR(10),
COUNT		INTEGER
)
;
COMMIT;
----------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_PREV_PER_YEAR_AGES

WITH A AS
(
SELECT
ALF_PE,
YEAR(FIRST_DATE) AS FIRST_YR,
YEAR(CENSOR_DATE) AS CENSOR_YR,
CASE WHEN INDEX_MULTI_TERR = 1 THEN 'POLY' ELSE TYPE END AS TYPE,
YEAR(TERR_2_DATE) AS POLY_YR,
AGE_ENTRY,
INCIDENT,
PREVALENT
FROM SAILW1483V.COHORT_MASTER_FINAL
ORDER BY ALF_PE
),

B AS
(
SELECT
ALF_PE,
CASE
	WHEN FIRST_YR <= 2010 AND (CENSOR_YR >= 2010 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2010) THEN TYPE
	WHEN FIRST_YR <= 2010 AND (CENSOR_YR >= 2010 OR CENSOR_YR IS NULL) AND POLY_YR <= 2010 THEN 'POLY'
	ELSE NULL
END AS TERR_2010,
CASE 
	WHEN PREVALENT = 1 AND (((2010 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2010 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2010 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2010) THEN NULL
	WHEN INCIDENT = 1 AND (((2010 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2010 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2010 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2010,
CASE
	WHEN FIRST_YR <= 2011 AND (CENSOR_YR >= 2011 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2011) THEN TYPE
	WHEN FIRST_YR <= 2011 AND (CENSOR_YR >= 2011 OR CENSOR_YR IS NULL) AND POLY_YR <= 2011 THEN 'POLY'
	ELSE NULL
END AS TERR_2011,
CASE 
	WHEN PREVALENT = 1 AND (((2011 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2011 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2011 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2011) THEN NULL
	WHEN INCIDENT = 1 AND (((2011 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2011 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2011 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2011,
CASE
	WHEN FIRST_YR <= 2012 AND (CENSOR_YR >= 2012 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2012) THEN TYPE
	WHEN FIRST_YR <= 2012 AND (CENSOR_YR >= 2012 OR CENSOR_YR IS NULL) AND POLY_YR <= 2012 THEN 'POLY'
	ELSE NULL
END AS TERR_2012,
CASE 
	WHEN PREVALENT = 1 AND (((2012 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2012 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2012 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2012) THEN NULL
	WHEN INCIDENT = 1 AND (((2012 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2012 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2012 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2012,
CASE
	WHEN FIRST_YR <= 2013 AND (CENSOR_YR >= 2013 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2013) THEN TYPE
	WHEN FIRST_YR <= 2013 AND (CENSOR_YR >= 2013 OR CENSOR_YR IS NULL) AND POLY_YR <= 2013 THEN 'POLY'
	ELSE NULL
END AS TERR_2013,
CASE 
	WHEN PREVALENT = 1 AND (((2013 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2013 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2013 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2013) THEN NULL
	WHEN INCIDENT = 1 AND (((2013 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2013 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2013 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2013,
CASE
	WHEN FIRST_YR <= 2014 AND (CENSOR_YR >= 2014 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2014) THEN TYPE
	WHEN FIRST_YR <= 2014 AND (CENSOR_YR >= 2014 OR CENSOR_YR IS NULL) AND POLY_YR <= 2014 THEN 'POLY'
	ELSE NULL
END AS TERR_2014,
CASE 
	WHEN PREVALENT = 1 AND (((2014 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2014 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2014 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2014) THEN NULL
	WHEN INCIDENT = 1 AND (((2014 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2014 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2014 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2014,
CASE
	WHEN FIRST_YR <= 2015 AND (CENSOR_YR >= 2015 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2015) THEN TYPE
	WHEN FIRST_YR <= 2015 AND (CENSOR_YR >= 2015 OR CENSOR_YR IS NULL) AND POLY_YR <= 2015 THEN 'POLY'
	ELSE NULL
END AS TERR_2015,
CASE 
	WHEN PREVALENT = 1 AND (((2015 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2015 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2015 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2015) THEN NULL
	WHEN INCIDENT = 1 AND (((2015 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2015 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2015 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2015,
CASE
	WHEN FIRST_YR <= 2016 AND (CENSOR_YR >= 2016 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2016) THEN TYPE
	WHEN FIRST_YR <= 2016 AND (CENSOR_YR >= 2016 OR CENSOR_YR IS NULL) AND POLY_YR <= 2016 THEN 'POLY'
	ELSE NULL
END AS TERR_2016,
CASE 
	WHEN PREVALENT = 1 AND (((2016 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2016 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2016 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2016) THEN NULL
	WHEN INCIDENT = 1 AND (((2016 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2016 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2016 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2016,
CASE
	WHEN FIRST_YR <= 2017 AND (CENSOR_YR >= 2017 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2017) THEN TYPE
	WHEN FIRST_YR <= 2017 AND (CENSOR_YR >= 2017 OR CENSOR_YR IS NULL) AND POLY_YR <= 2017 THEN 'POLY'
	ELSE NULL
END AS TERR_2017,
CASE 
	WHEN PREVALENT = 1 AND (((2017 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2017 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2017 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2017) THEN NULL
	WHEN INCIDENT = 1 AND (((2017 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2017 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2017 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2017,
CASE
	WHEN FIRST_YR <= 2018 AND (CENSOR_YR >= 2018 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2018) THEN TYPE
	WHEN FIRST_YR <= 2018 AND (CENSOR_YR >= 2018 OR CENSOR_YR IS NULL) AND POLY_YR <= 2018 THEN 'POLY'
	ELSE NULL
END AS TERR_2018,
CASE 
	WHEN PREVALENT = 1 AND (((2018 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2018 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2018 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2018) THEN NULL
	WHEN INCIDENT = 1 AND (((2018 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2018 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2018 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2018,
CASE
	WHEN FIRST_YR <= 2019 AND (CENSOR_YR >= 2019 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2019) THEN TYPE
	WHEN FIRST_YR <= 2019 AND (CENSOR_YR >= 2019 OR CENSOR_YR IS NULL) AND POLY_YR <= 2019 THEN 'POLY'
	ELSE NULL
END AS TERR_2019,
CASE 
	WHEN PREVALENT = 1 AND (((2019 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2019 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2019 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2019) THEN NULL
	WHEN INCIDENT = 1 AND (((2019 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2019 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2019 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2019,
CASE
	WHEN FIRST_YR <= 2020 AND (CENSOR_YR >= 2020 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2020) THEN TYPE
	WHEN FIRST_YR <= 2020 AND (CENSOR_YR >= 2020 OR CENSOR_YR IS NULL) AND POLY_YR <= 2020 THEN 'POLY'
	ELSE NULL
END AS TERR_2020,
CASE 
	WHEN PREVALENT = 1 AND (((2020 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2020 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2020 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2020) THEN NULL
	WHEN INCIDENT = 1 AND (((2020 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2020 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2020 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2020,
CASE
	WHEN FIRST_YR <= 2021 AND (CENSOR_YR >= 2021 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2021) THEN TYPE
	WHEN FIRST_YR <= 2021 AND (CENSOR_YR >= 2021 OR CENSOR_YR IS NULL) AND POLY_YR <= 2021 THEN 'POLY'
	ELSE NULL
END AS TERR_2021,
CASE 
	WHEN PREVALENT = 1 AND (((2021 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2021 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2021 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2021) THEN NULL
	WHEN INCIDENT = 1 AND (((2021 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2021 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2021 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2021,
CASE
	WHEN FIRST_YR <= 2022 AND (CENSOR_YR >= 2022 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2022) THEN TYPE
	WHEN FIRST_YR <= 2022 AND (CENSOR_YR >= 2022 OR CENSOR_YR IS NULL) AND POLY_YR <= 2022 THEN 'POLY'
	ELSE NULL
END AS TERR_2022,
CASE 
	WHEN PREVALENT = 1 AND (((2022 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2022 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2022 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2022) THEN NULL
	WHEN INCIDENT = 1 AND (((2022 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2022 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2022 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2022,
CASE
	WHEN FIRST_YR <= 2023 AND (CENSOR_YR >= 2023 OR CENSOR_YR IS NULL) AND (POLY_YR IS NULL OR POLY_YR > 2023) THEN TYPE
	WHEN FIRST_YR <= 2023 AND (CENSOR_YR >= 2023 OR CENSOR_YR IS NULL) AND POLY_YR <= 2023 THEN 'POLY'
	ELSE NULL
END AS TERR_2023,
CASE 
	WHEN PREVALENT = 1 AND (((2023 - 2010) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN PREVALENT = 1 AND (((2023 - 2010) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN PREVALENT = 1 AND (((2023 - 2010) + AGE_ENTRY) > 85) THEN '> 85'
	
	WHEN INCIDENT = 1 AND (FIRST_YR > 2023) THEN NULL
	WHEN INCIDENT = 1 AND (((2023 - FIRST_YR) + AGE_ENTRY) < 60) THEN '< 60'
	WHEN INCIDENT = 1 AND (((2023 - FIRST_YR) + AGE_ENTRY) BETWEEN 60 AND 85) THEN '60 - 85'
	WHEN INCIDENT = 1 AND (((2023 - FIRST_YR) + AGE_ENTRY) > 85)THEN '> 85'
ELSE NULL
END AS AGE_2023
FROM A
),

--SELECT * FROM B

C AS
(
SELECT
2010 AS YEAR,
TERR_2010 TERR,
AGE_2010 AGE,
COUNT(TERR_2010) AS COUNT
FROM B
GROUP BY TERR_2010, AGE_2010

UNION

SELECT
2011 AS YEAR,
TERR_2011 TERR,
AGE_2011 AGE,
COUNT(TERR_2011) AS COUNT
FROM B
GROUP BY TERR_2011, AGE_2011

UNION

SELECT
2012 AS YEAR,
TERR_2012 TERR,
AGE_2012 AGE,
COUNT(TERR_2012) AS COUNT
FROM B
GROUP BY TERR_2012, AGE_2012

UNION

SELECT
2013 AS YEAR,
TERR_2013 TERR,
AGE_2013 AGE,
COUNT(TERR_2013) AS COUNT
FROM B
GROUP BY TERR_2013, AGE_2013

UNION

SELECT
2014 AS YEAR,
TERR_2014 TERR,
AGE_2014 AGE,
COUNT(TERR_2014) AS COUNT
FROM B
GROUP BY TERR_2014, AGE_2014

UNION

SELECT
2015 AS YEAR,
TERR_2015 TERR,
AGE_2015 AGE,
COUNT(TERR_2015) AS COUNT
FROM B
GROUP BY TERR_2015, AGE_2015

UNION

SELECT
2016 AS YEAR,
TERR_2016 TERR,
AGE_2016 AGE,
COUNT(TERR_2016) AS COUNT
FROM B
GROUP BY TERR_2016, AGE_2016

UNION

SELECT
2017 AS YEAR,
TERR_2017 TERR,
AGE_2017 AGE,
COUNT(TERR_2017) AS COUNT
FROM B
GROUP BY TERR_2017, AGE_2017

UNION

SELECT
2018 AS YEAR,
TERR_2018 TERR,
AGE_2018 AGE,
COUNT(TERR_2018) AS COUNT
FROM B
GROUP BY TERR_2018, AGE_2018

UNION

SELECT
2019 AS YEAR,
TERR_2019 TERR,
AGE_2019 AGE,
COUNT(TERR_2019) AS COUNT
FROM B
GROUP BY TERR_2019, AGE_2019

UNION

SELECT
2020 AS YEAR,
TERR_2020 TERR,
AGE_2020 AGE,
COUNT(TERR_2020) AS COUNT
FROM B
GROUP BY TERR_2020, AGE_2020

UNION

SELECT
2021 AS YEAR,
TERR_2021 TERR,
AGE_2021 AGE,
COUNT(TERR_2021) AS COUNT
FROM B
GROUP BY TERR_2021, AGE_2021

UNION

SELECT
2022 AS YEAR,
TERR_2022 TERR,
AGE_2022 AGE,
COUNT(TERR_2022) AS COUNT
FROM B
GROUP BY TERR_2022, AGE_2022

UNION

SELECT
2023 AS YEAR,
TERR_2023 TERR,
AGE_2023 AGE,
COUNT(TERR_2023) AS COUNT
FROM B
GROUP BY TERR_2023, AGE_2023
)

SELECT
*
FROM C
WHERE TERR IS NOT NULL

ORDER BY YEAR, TERR, AGE
;
----------------------------------------------
--
SELECT * FROM SAILW1483V.PREP_PREV_PER_YEAR_AGES;
--
----------------------------------------------
--
--Feature space for logistic regression - received LDL-C test within incident year
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LDL_TEST_INC_REGR');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.TEMP_LDL_TEST_INC_REGR
(
GENDER						INTEGER,
WIMD_2019_QUINTILE			INTEGER,
FIRST_YEAR					INTEGER,
AGE_DIAG					INTEGER,
WEIGHT_CAT					VARCHAR(15),											
TYPE						VARCHAR(15),
INDEX_MULTI_TERR			INTEGER,
HAS_2_TERR					INTEGER,
HAS_3_TERR					INTEGER,
STUDY_30D_FOLLOW_UP			INTEGER,
STUDY_60D_FOLLOW_UP			INTEGER,
STUDY_90D_FOLLOW_UP			INTEGER,
STUDY_120D_FOLLOW_UP		INTEGER,
STUDY_365D_FOLLOW_UP		INTEGER,
SMOKING_STATUS				VARCHAR(1),
PEDW_ADMIS_FIRST			INTEGER,
HAS_GP_DIAG					INTEGER,
DIABETES_BEFORE				INTEGER,
DEMENTIA_BEFORE				INTEGER,
RESP_BEFORE					INTEGER,
LIVER_BEFORE				INTEGER,
RENAL_BEFORE				INTEGER,
HYPERTENSION_BEFORE			INTEGER,
LLT							VARCHAR(20),
HAD_LIPID_TEST				INTEGER			
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LDL_TEST_INC_REGR

WITH A AS
(
SELECT
ALF_PE,
FIRST_DATE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE INCIDENT = 1
AND STUDY_365D_FOLLOW_UP = 1
),

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
GP.EVENT_DT,
GP.EVENT_VAL,
L.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_LIPID_READ L
ON GP.EVENT_CD = L.READ_CODE

WHERE GP.EVENT_DT > A.FIRST_DATE
AND GP.EVENT_DT <= A.FIRST_DATE+365
AND READ_TYPE = 'LDL'

ORDER BY A.ALF_PE, GP.EVENT_DT
),

C AS
(
SELECT
DISTINCT ALF_PE
FROM B
)

SELECT
GENDER,
WIMD_2019_QUINTILE,
F.FIRST_YEAR,
AGE_DIAG,
WEIGHT_CAT,
F.TYPE,
INDEX_MULTI_TERR,
HAS_2_TERR,
HAS_3_TERR,
STUDY_30D_FOLLOW_UP,
STUDY_60D_FOLLOW_UP,
STUDY_90D_FOLLOW_UP,
STUDY_120D_FOLLOW_UP,
STUDY_365D_FOLLOW_UP,
SMOKING_STATUS,
PEDW_ADMIS_FIRST,
HAS_GP_DIAG,
DIABETES_BEFORE,
DEMENTIA_BEFORE,
RESP_BEFORE,
LIVER_BEFORE,
RENAL_BEFORE,
HYPERTENSION_BEFORE,
LLT,
CASE WHEN C.ALF_PE IS NOT NULL THEN 1 ELSE 0 END AS HAD_LIPID_TEST
FROM SAILW1483V.COHORT_MASTER_FINAL F

LEFT JOIN C
ON F.ALF_PE = C.ALF_PE

LEFT JOIN SAILW1483V.TEMP_INC_LLT L
ON F.ALF_PE = L.ALF_PE

WHERE GENDER IN(1,2) AND INCIDENT = 1
;
------------------------------------------ 
--
SELECT * FROM SAILW1483V.TEMP_LDL_TEST_INC_REGR;
------------------------------------------  
--
--Feature space for logistic regression - had LDL-C controlled within incident year
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LIPID_CONTROL_LDL_INC_REGR');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.TEMP_LIPID_CONTROL_LDL_INC_REGR
(
GENDER						INTEGER,
WIMD_2019_QUINTILE			INTEGER,
FIRST_YEAR					INTEGER,
AGE_DIAG					INTEGER,
WEIGHT_CAT					VARCHAR(15),
TYPE						VARCHAR(15),
INDEX_MULTI_TERR			INTEGER,
HAS_2_TERR					INTEGER,
HAS_3_TERR					INTEGER,
STUDY_30D_FOLLOW_UP			INTEGER,
STUDY_60D_FOLLOW_UP			INTEGER,
STUDY_90D_FOLLOW_UP			INTEGER,
STUDY_120D_FOLLOW_UP		INTEGER,
STUDY_365D_FOLLOW_UP		INTEGER,
SMOKING_STATUS				VARCHAR(1),
PEDW_ADMIS_FIRST			INTEGER,
HAS_GP_DIAG					INTEGER,
DIABETES_BEFORE				INTEGER,
DEMENTIA_BEFORE				INTEGER,
RESP_BEFORE					INTEGER,
LIVER_BEFORE				INTEGER,
RENAL_BEFORE				INTEGER,
HYPERTENSION_BEFORE			INTEGER,
LLT							VARCHAR(20),
LDL_CONTROLLED				INTEGER			
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LIPID_CONTROL_LDL_INC_REGR

WITH A AS
(
SELECT
ALF_PE,
FIRST_DATE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE INCIDENT = 1
AND STUDY_365D_FOLLOW_UP = 1
),

B AS
(
SELECT
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_LDL_CONTROL
WHERE MIN_LDL <= 1.8
)

SELECT
GENDER,
WIMD_2019_QUINTILE,
F.FIRST_YEAR,
AGE_DIAG,
WEIGHT_CAT,
F.TYPE,
INDEX_MULTI_TERR,
HAS_2_TERR,
HAS_3_TERR,
STUDY_30D_FOLLOW_UP,
STUDY_60D_FOLLOW_UP,
STUDY_90D_FOLLOW_UP,
STUDY_120D_FOLLOW_UP,
STUDY_365D_FOLLOW_UP,
SMOKING_STATUS,
PEDW_ADMIS_FIRST,
HAS_GP_DIAG,
DIABETES_BEFORE,
DEMENTIA_BEFORE,
RESP_BEFORE,
LIVER_BEFORE,
RENAL_BEFORE,
HYPERTENSION_BEFORE,
LLT,
CASE WHEN B.ALF_PE IS NOT NULL THEN 1 ELSE 0 END AS LDL_CONTROLLED
FROM SAILW1483V.COHORT_MASTER_FINAL F

LEFT JOIN B
ON F.ALF_PE = B.ALF_PE

LEFT JOIN SAILW1483V.TEMP_INC_LLT L
ON F.ALF_PE = L.ALF_PE

WHERE GENDER IN(1,2) AND INCIDENT = 1
;
------------------------------------------  
--
SELECT * FROM SAILW1483V.TEMP_LIPID_CONTROL_LDL_INC_REGR;
------------------------------------------  
--
--Feature space for logistic regression - prescribed high-intensity statin therapy within incident year
------------------------------------------  
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LIPID_TREAT_HI_STATIN_INC_REGR');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.TEMP_LIPID_TREAT_HI_STATIN_INC_REGR
(
GENDER						INTEGER,
WIMD_2019_QUINTILE			INTEGER,
FIRST_YEAR					INTEGER,
AGE_DIAG					INTEGER,
WEIGHT_CAT					VARCHAR(15),											
TYPE						VARCHAR(15),
INDEX_MULTI_TERR			INTEGER,
HAS_2_TERR					INTEGER,
HAS_3_TERR					INTEGER,
STUDY_30D_FOLLOW_UP			INTEGER,
STUDY_60D_FOLLOW_UP			INTEGER,
STUDY_90D_FOLLOW_UP			INTEGER,
STUDY_120D_FOLLOW_UP		INTEGER,
STUDY_365D_FOLLOW_UP		INTEGER,
SMOKING_STATUS				VARCHAR(1),
PEDW_ADMIS_FIRST			INTEGER,
HAS_GP_DIAG					INTEGER,
DIABETES_BEFORE				INTEGER,
DEMENTIA_BEFORE				INTEGER,
RESP_BEFORE					INTEGER,
LIVER_BEFORE				INTEGER,
RENAL_BEFORE				INTEGER,
HYPERTENSION_BEFORE			INTEGER,
HI_STATIN					INTEGER			
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LIPID_TREAT_HI_STATIN_INC_REGR

WITH A AS
(
SELECT
*
FROM SAILW1483V.TEMP_INC_LLT 

WHERE LLT = 'HIGH_STATIN'
)

SELECT
GENDER,
WIMD_2019_QUINTILE,
F.FIRST_YEAR,
AGE_DIAG,
WEIGHT_CAT,
F.TYPE,
INDEX_MULTI_TERR,
HAS_2_TERR,
HAS_3_TERR,
STUDY_30D_FOLLOW_UP,
STUDY_60D_FOLLOW_UP,
STUDY_90D_FOLLOW_UP,
STUDY_120D_FOLLOW_UP,
STUDY_365D_FOLLOW_UP,
SMOKING_STATUS,
PEDW_ADMIS_FIRST,
HAS_GP_DIAG,
DIABETES_BEFORE,
DEMENTIA_BEFORE,
RESP_BEFORE,
LIVER_BEFORE,
RENAL_BEFORE,
HYPERTENSION_BEFORE,
CASE WHEN A.ALF_PE IS NOT NULL THEN 1 ELSE 0 END AS HI_STATIN
FROM SAILW1483V.COHORT_MASTER_FINAL F

LEFT JOIN A
ON F.ALF_PE = A.ALF_PE

WHERE GENDER IN(1,2) AND INCIDENT = 1
;
------------------------------------------  
--
SELECT * FROM SAILW1483V.TEMP_LIPID_TREAT_HI_STATIN_INC_REGR;
-------------------------------------------
--
-- Number and proportion of incident poly-vascular diagnoses which included IHD
--------------------------------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_POLY_PROP_IHD');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.TEMP_INC_POLY_PROP_IHD
(
YEAR					INTEGER,
IHD_COUNT				INTEGER,
ALL_COUNT				INTEGER,
IHD_PCT					INTEGER		
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_POLY_PROP_IHD

WITH ALL AS
(
SELECT
ALF_PE,
FIRST_YEAR,
INDEX_MULTI_TERR_TYPE,
TYPE,
TERR_2_TYPE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE INDEX_MULTI_TERR = 1
AND FIRST_YEAR >= 2010
)

--SELECT * FROM ALL
,

IHD AS
(
SELECT
*
FROM ALL

WHERE TERR_2_TYPE LIKE('%IHD%')
)

---SELECT * FROM IHD
,

ALL_COUNT AS
(
SELECT
COUNT(ALF_PE) AS ALL_COUNT,
FIRST_YEAR AS YEAR
FROM ALL

GROUP BY FIRST_YEAR
ORDER BY FIRST_YEAR
),

IHD_COUNT AS
(
SELECT
COUNT(ALF_PE) AS IHD_COUNT,
FIRST_YEAR AS YEAR
FROM IHD

GROUP BY FIRST_YEAR
ORDER BY FIRST_YEAR
)

SELECT
A.YEAR,
IHD_COUNT,
ALL_COUNT,
ROUND((CAST(IHD_COUNT AS FLOAT) / CAST(ALL_COUNT AS FLOAT)) * 100,0) AS IHD_PCT
FROM ALL_COUNT A

LEFT JOIN IHD_COUNT I
ON A.YEAR = I.YEAR

ORDER BY A.YEAR
;
------------------------------------------  
--
SELECT * FROM SAILW1483V.TEMP_INC_POLY_PROP_IHD;
-------------------------------------------