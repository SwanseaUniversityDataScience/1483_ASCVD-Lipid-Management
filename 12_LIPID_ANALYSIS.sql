--
--
------------------------------------------
--
-- Script:			12_LIPID_ANALYSIS.sql
-- SAIL project:	1483 - Cardiovascular disease risk prediction and optimisation of risk factor management
--
-- About:			Analysis for lipid testing, treatment and control within the study cohort
-- Author:			Daniel King
------------------------------------------
--
-- Incident population control of LDL-C
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LDL_CONTROL');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LDL_CONTROL
(
	ALF_PE			BIGINT,
	TYPE			VARCHAR(10),
	DIAG			DATE,
	TEST			DATE,
	MIN_LDL			DECIMAL(5,2)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LDL_CONTROL
--
WITH A AS
(
SELECT
ALF_PE,
FIRST_DATE,
CASE WHEN INDEX_MULTI_TERR_TYPE IS NOT NULL THEN 'POLY' ELSE TYPE END AS TYPE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE INCIDENT = 1
AND STUDY_365D_FOLLOW_UP = 1
),

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
A.TYPE,
GP.EVENT_DT,
GP.EVENT_VAL,
L.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_LIPID_READ L
ON GP.EVENT_CD = L.READ_CODE

WHERE GP.EVENT_DT > A.FIRST_DATE
AND GP.EVENT_DT <= A.FIRST_DATE+365
AND L.READ_TYPE = 'LDL'

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

C AS
(
SELECT 
ALF_PE,
TYPE,
FIRST_DATE AS DIAG,
EVENT_DT AS TEST,
EVENT_VAL,
ROW_NUMBER() OVER(PARTITION BY ALF_PE ORDER BY EVENT_VAL) AS RANK
FROM B

WHERE EVENT_VAL IS NOT NULL
)

--SELECT * FROM C
SELECT
ALF_PE,
TYPE,
DIAG,
TEST,
EVENT_VAL AS MIN_LDL
FROM
(
SELECT * FROM C WHERE RANK = 1
)
;
------------------------------------------
--
SELECT 
* 
FROM SAILW1483V.TEMP_LDL_CONTROL;
------------------------------------------
--
-- Incident population control of LDL-C by age category
---------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LDL_CONTROL_AGES');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LDL_CONTROL_AGES
(
	ALF_PE			BIGINT,
	TYPE			VARCHAR(10),
	DIAG			DATE,
	TEST			DATE,
	MIN_LDL			DECIMAL(5,2),
	AGE_CAT			VARCHAR(20)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LDL_CONTROL_AGES
--
SELECT 
L.*,
CASE 
	WHEN AGE_DIAG < 60 				THEN '< 60'
	WHEN AGE_DIAG BETWEEN 60 AND 85 THEN '60 - 85'
	WHEN AGE_DIAG > 85 				THEN '> 85'
	ELSE NULL
END AS AGE_CAT
FROM SAILW1483V.TEMP_LDL_CONTROL L


LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL M
ON L.ALF_PE = M.ALF_PE
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_LDL_CONTROL_AGES;
--
------------------------------------------
--
-- Prevalent population control of LDL-C
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LDL_CONTROL_PREV');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LDL_CONTROL_PREV
(
	ALF_PE			BIGINT,
	TYPE			VARCHAR(10),
	DIAG			DATE,
	TEST			DATE,
	MIN_LDL			DECIMAL(15,2)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LDL_CONTROL_PREV
--
WITH A AS
(
SELECT
ALF_PE,
TYPE,
FIRST_DATE,
CASE WHEN CENSOR_DATE IS NULL THEN CAST('2023-01-01' AS DATE) ELSE CENSOR_DATE END AS CENSOR_DATE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE STUDY_365D_FOLLOW_UP = 1
),

B AS
(
SELECT
A.ALF_PE,
A.TYPE,
A.FIRST_DATE,
A.CENSOR_DATE,
GP.EVENT_DT,
GP.EVENT_VAL,
L.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_LIPID_READ L
ON GP.EVENT_CD = L.READ_CODE

WHERE GP.EVENT_DT > A.FIRST_DATE
AND (YEAR(GP.EVENT_DT) < YEAR(CENSOR_DATE) OR CENSOR_DATE IS NULL)
AND L.READ_TYPE = 'LDL'

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

C AS
(
SELECT
*
FROM
(
SELECT
*,
CASE WHEN YEAR(EVENT_DT) > YEAR(FIRST_DATE) AND (EVENT_DT <= CENSOR_DATE OR CENSOR_DATE IS NULL) THEN 1 ELSE 0 END AS PREV
FROM B

WHERE YEAR(EVENT_DT) >= 2010
)
WHERE PREV = 1
)
--SELECT * FROM C
,

D AS
(
SELECT 
ALF_PE,
TYPE,
FIRST_DATE AS DIAG,
EVENT_DT AS TEST,
EVENT_VAL,
ROW_NUMBER() OVER(PARTITION BY ALF_PE,YEAR(EVENT_DT) ORDER BY EVENT_VAL) AS RANK
FROM C

WHERE EVENT_VAL IS NOT NULL
)

--SELECT * FROM D
SELECT
X.ALF_PE,
CASE WHEN TERR_2_YEAR IS NOT NULL AND YEAR(TEST) >= TERR_2_YEAR THEN 'POLY'
	 ELSE X.TYPE END AS TYPE,
DIAG,
TEST,
EVENT_VAL AS MIN_LDL
FROM
(
SELECT * FROM D WHERE RANK = 1
) X

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON X.ALF_PE = F.ALF_PE
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_LDL_CONTROL_PREV;
------------------------------------------
--
-- Prevalent population control of LDL-C by age category
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LDL_CONTROL_PREV_AGES');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LDL_CONTROL_PREV_AGES
(
	ALF_PE			BIGINT,
	TYPE			VARCHAR(10),
	DIAG			DATE,
	TEST			DATE,
	MIN_LDL			DECIMAL(15,2),
	AGE_CAT			VARCHAR(20)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LDL_CONTROL_PREV_AGES
--
WITH A AS
(
SELECT
L.*,
CASE 	
	WHEN PREVALENT = 1 	THEN (YEAR(TEST) - 2010) + AGE_ENTRY
	WHEN INCIDENT = 1 	THEN (YEAR(TEST) - FIRST_YEAR) + AGE_ENTRY
	ELSE NULL
END AS AGE
FROM SAILW1483V.TEMP_LDL_CONTROL_PREV L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL M
ON L.ALF_PE = M.ALF_PE
)

SELECT
ALF_PE,
TYPE,
DIAG,
TEST,
MIN_LDL,
CASE 
	WHEN AGE < 60 				THEN '< 60'
	WHEN AGE BETWEEN 60 AND 85 	THEN '60 - 85'
	WHEN AGE > 85 				THEN '> 85'
	ELSE NULL
END AS AGE_CAT
FROM A
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_LDL_CONTROL_PREV_AGES;
--
------------------------------------------
--
-- Incident population testing of any lipids
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LIPID_TEST_PER_YEAR');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LIPID_TEST_PER_YEAR
(
	ALF_PE			BIGINT,
	TYPE			VARCHAR(20),
	DIAG			DATE,
	TEST			DATE,	
	DIFF			INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LIPID_TEST_PER_YEAR

WITH A AS
(
SELECT
ALF_PE,
FIRST_DATE,
CASE WHEN INDEX_MULTI_TERR_TYPE IS NOT NULL THEN 'POLY' ELSE TYPE END AS TYPE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE INCIDENT = 1
AND STUDY_365D_FOLLOW_UP = 1
),

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
A.TYPE,
GP.EVENT_DT,
GP.EVENT_VAL,
L.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_LIPID_READ L
ON GP.EVENT_CD = L.READ_CODE

WHERE GP.EVENT_DT > A.FIRST_DATE
AND GP.EVENT_DT <= A.FIRST_DATE+365

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--Of people with tests, distribution of time from first date to test date 

SELECT
ALF_PE,
TYPE,
DIAG,
TEST,
DAYS(TEST) - DAYS(DIAG) AS DIFF 
FROM
(
SELECT 
ALF_PE,
TYPE,
FIRST_DATE AS DIAG,
EVENT_DT AS TEST,
EVENT_VAL,
ROW_NUMBER() OVER(PARTITION BY ALF_PE ORDER BY EVENT_DT) AS RANK
FROM B

WHERE EVENT_VAL IS NOT NULL
)
WHERE RANK = 1
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_LIPID_TEST_PER_YEAR;
------------------------------------------
--
-- Prevalent population testing of any lipids
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LIPID_TEST_PER_YEAR_PREV');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LIPID_TEST_PER_YEAR_PREV
(
	ALF_PE			BIGINT,
	YEAR			INTEGER,
	TYPE			VARCHAR(20)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LIPID_TEST_PER_YEAR_PREV

WITH A AS
(
SELECT
ALF_PE,
TYPE,
FIRST_DATE,
CENSOR_DATE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE STUDY_365D_FOLLOW_UP = 1
),

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
A.CENSOR_DATE,
GP.EVENT_DT,
L.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_LIPID_READ L
ON GP.EVENT_CD = L.READ_CODE

WHERE GP.EVENT_DT > A.FIRST_DATE
AND (YEAR(GP.EVENT_DT) < YEAR(CENSOR_DATE) OR CENSOR_DATE IS NULL)

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

C AS
(
SELECT 
ALF_PE,
FIRST_DATE,
CENSOR_DATE,
EVENT_DT,
ROW_NUMBER() OVER(PARTITION BY ALF_PE, YEAR(EVENT_DT) ORDER BY EVENT_DT) AS RANK
FROM B
)

--SELECT * FROM C
,

D AS
(
SELECT
ALF_PE,
FIRST_DATE,
CENSOR_DATE,
EVENT_DT
FROM C 
WHERE RANK = 1
ORDER BY ALF_PE
)

--SELECT * FROM D
,

E AS
(
SELECT
*,
CASE WHEN YEAR(EVENT_DT) > YEAR(FIRST_DATE) AND (EVENT_DT <= CENSOR_DATE OR CENSOR_DATE IS NULL) THEN 1 ELSE 0 END AS PREV
FROM D

WHERE YEAR(EVENT_DT) >= 2010
)

--SELECT * FROM E
,

F AS
(
SELECT
ALF_PE,
EVENT_DT
FROM E 

WHERE PREV = 1
)

--SELECT * FROM F
,

G AS
(
SELECT 
F.*,
C.FIRST_DATE,
C.TERR_2_DATE,
C.TERR_3_DATE,
C.TYPE,
C.TERR_2_TYPE,
C.TERR_3_TYPE
FROM F

JOIN SAILW1483V.COHORT_MASTER_FINAL C
ON F.ALF_PE = C.ALF_PE
)

--SELECT * FROM G
,

H AS
(
SELECT
*,
CASE WHEN TERR_3_DATE IS NOT NULL AND EVENT_DT >= TERR_3_DATE THEN 'POLY'
	 WHEN TERR_2_DATE IS NOT NULL AND EVENT_DT >= TERR_2_DATE THEN 'POLY'
	 ELSE TYPE
END AS TYPE_CORRECT
FROM G

ORDER BY ALF_PE, EVENT_DT
)

SELECT
ALF_PE,
YEAR(EVENT_DT) AS YEAR,
TYPE_CORRECT AS TYPE
FROM H

ORDER BY ALF_PE, EVENT_DT
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_LIPID_TEST_PER_YEAR_PREV;
------------------------------------------
--
-- Incident population prescription of lipid lowering therapy
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_LLT');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_LLT
(
	ALF_PE			BIGINT,
	DRUG_YR			INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_LLT

WITH A AS
(
SELECT
ALF_PE,
FIRST_DATE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE INCIDENT = 1
AND STUDY_365D_FOLLOW_UP = 1
)

--SELECT COUNT(DISTINCT ALF_PE) AS COUNT, YEAR(FIRST_DATE) AS YR FROM A GROUP BY YEAR(FIRST_DATE) ORDER BY YEAR(FIRST_DATE)
,

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM A 

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT > FIRST_DATE
AND GP.EVENT_DT <= FIRST_DATE+365

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM A
,

D AS 
(
SELECT
	ALF_PE,
	EVENT_DT AS DRUG_DATE,
	YEAR(EVENT_DT) AS DRUG_YR,
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM B
)

--SELECT * FROM D
--ORDER BY ALF_PE
,

E AS
(
SELECT
ALF_PE,
DRUG_DATE,
DRUG_YR,
CASE WHEN LOW_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS HIGH_S_DT
FROM D
)

--SELECT * FROM E
,

F AS
(
SELECT
ALF_PE,
DRUG_YR,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM E
GROUP BY ALF_PE,DRUG_YR
ORDER BY ALF_PE,DRUG_YR
)

--SELECT * FROM F
,

G AS
(
SELECT
ALF_PE,
DRUG_YR,
LOW,
HIGH,
CASE 
	WHEN LOW 	IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) < DAYS(HIGH) 	THEN LOW
	WHEN LOW 	IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) 	THEN HIGH	
	WHEN LOW 	IS NULL 	THEN HIGH	
	WHEN HIGH 	IS NULL 	THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW 	IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW 	IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW 	IS NULL 	AND HIGH IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH 	IS NULL 	AND LOW  IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
DRUG_YR,
STATIN_FIRST_DT,
STATIN_FIRST
FROM G
)

--SELECT * FROM H
,


I AS 
(
SELECT
	ALF_PE,
	DRUG_YR,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN) 	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B) 		AS STATIN_B
FROM D
GROUP BY ALF_PE, DRUG_YR
)

--SELECT * FROM I
,

J AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL 	THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '0' AND STATIN_B IS NOT NULL 	THEN STATIN_B	
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL 		THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM I
),

K AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM J
),

L AS
(
SELECT
K.ALF_PE,
K.DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' 	OR STATIN_B = 'LOW_STATIN') 	THEN H.STATIN_FIRST ELSE STATIN_B 		END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE STATIN_OTHER 	END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' 			OR LLT = 'LOW_STATIN') 			THEN H.STATIN_FIRST ELSE LLT 			END AS LLT
FROM K

JOIN H
ON K.ALF_PE = H.ALF_PE
AND K.DRUG_YR = H.DRUG_YR
),

M AS
(
SELECT
L.*,
CASE 
	WHEN LLT = 'STATIN_COMBI' 	THEN 5
	WHEN LLT = 'HIGH_STATIN' 	THEN 4
	WHEN LLT = 'LOW_STATIN' 	THEN 3
	WHEN LLT = 'OTHER' 			THEN 2
	WHEN LLT = 'NOTX' 			THEN 1	
END AS LLT_RANK
FROM L
),

N AS
(
SELECT
ALF_PE,
DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
STATIN_B,
STATIN_OTHER,	
LLT
FROM M
WHERE NOT EXISTS -- This filter translates to 'fetch all rows from the table where the corresponding field has no larger record'
	(SELECT 
		1 
	FROM M M2 
	WHERE M2.ALF_PE = M.ALF_PE 
	AND M2.LLT_RANK > M.LLT_RANK
	)
),

O AS
(
SELECT
ALF_PE,
DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
STATIN_B,
STATIN_OTHER,	
LLT
FROM
(
SELECT
*,
ROW_NUMBER() OVER(PARTITION BY ALF_PE ORDER BY DRUG_YR) AS RANK
FROM N
)
WHERE RANK = 1
)

SELECT
A.ALF_PE,
YEAR(A.FIRST_DATE) AS DRUG_YR,
CASE WHEN O.LLT IS NULL THEN 'NOTX' ELSE O.LLT END AS LLT,
CASE WHEN INDEX_MULTI_TERR_TYPE IS NOT NULL THEN 'POLY' ELSE F.TYPE END AS TYPE
FROM A

LEFT JOIN O
ON A.ALF_PE = O.ALF_PE

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON A.ALF_PE = F.ALF_PE
;
----------------------------------
--
SELECT COUNT(DISTINCT ALF_PE) AS COUNT, DRUG_YR AS YR FROM SAILW1483V.TEMP_INC_LLT GROUP BY DRUG_YR ORDER BY DRUG_YR;
--
SELECT DRUG_YR AS YEAR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_INC_LLT GROUP BY DRUG_YR, TYPE, LLT ORDER BY DRUG_YR, TYPE, LLT;
------------------------------------------
--
-- Incident population prescription of lipid lowering therapy by age category
----------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_LLT_AGES');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_LLT_AGES
(
	ALF_PE			BIGINT,
	DRUG_YR			INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10),
	AGE_CAT			VARCHAR(20)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_LLT_AGES
--
SELECT 
L.*,
CASE 
	WHEN AGE_DIAG < 60 				THEN '< 60'
	WHEN AGE_DIAG BETWEEN 60 AND 85 THEN '60 - 85'
	WHEN AGE_DIAG > 85 				THEN '> 85'
	ELSE NULL
END AS AGE_CAT
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL M
ON L.ALF_PE = M.ALF_PE
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_LLT_AGES;
--
------------------------------------------
--
-- Prevalent population prescription of lipid lowering therapy
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_LLT');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_LLT
(
	ALF_PE			BIGINT,
	YR				INTEGER,
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_LLT

WITH X AS
(
SELECT
ALF_PE,
FIRST_DATE,
YEAR(FIRST_DATE) AS FIRST_YR,
CENSOR_DATE,
YEAR(CENSOR_DATE) AS CENSOR_YR
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE STUDY_365D_FOLLOW_UP = 1
),

--Use recurring CTE to duplicate rows based on the duration of follow-up
CTE(ALF_PE,FIRST_DATE,FIRST_YR,CENSOR_DATE,CENSOR_YR,YR) AS
(
SELECT
	ALF_PE,
	FIRST_DATE,
	FIRST_YR,
	CENSOR_DATE,
	CASE WHEN CENSOR_YR IS NULL THEN 2023 ELSE CENSOR_YR END AS CENSOR_YR,
	FIRST_YR AS YR
FROM X

UNION ALL

SELECT
	ALF_PE,
	FIRST_DATE,
	FIRST_YR,
	CENSOR_DATE,
	CENSOR_YR,
	YR + 1
FROM CTE
WHERE YR <= CTE.CENSOR_YR-2 --ALLOW THE YEAR BEFORE THEIR CENSOR DATE TO MAKE SURE THEY HAVE FULL YEAR DATA
)

--SELECT * FROM CTE ORDER BY ALF_PE, YR
,

X_2 AS
(
SELECT
*
FROM CTE
WHERE YR > FIRST_YR AND YR >= 2010
)

--SELECT * FROM X_2
-- SELECT COUNT(DISTINCT ALF_PE) AS PREV, YR
--  FROM X_2 GROUP BY YR ORDER BY YR
,
 
A AS
(
SELECT
ALF_PE,
FIRST_DATE,
CENSOR_DATE
FROM SAILW1483V.COHORT_MASTER_FINAL
WHERE STUDY_365D_FOLLOW_UP = 1
),

B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
A.CENSOR_DATE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT > A.FIRST_DATE
AND (YEAR(GP.EVENT_DT) < YEAR(CENSOR_DATE) OR CENSOR_DATE IS NULL)

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

C AS
(
SELECT
*
FROM
(
SELECT
*,
CASE WHEN YEAR(EVENT_DT) > YEAR(FIRST_DATE) AND (EVENT_DT <= CENSOR_DATE OR CENSOR_DATE IS NULL) THEN 1 ELSE 0 END AS PREV
FROM B

WHERE YEAR(EVENT_DT) >= 2010
)
WHERE PREV = 1
)

--SELECT * FROM C
,

D AS 
(
SELECT
	ALF_PE,
	EVENT_DT AS DRUG_DATE,
	YEAR(EVENT_DT) AS DRUG_YR,
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM C
)

--SELECT * FROM D
--ORDER BY ALF_PE
,

E AS
(
SELECT
ALF_PE,
DRUG_DATE,
DRUG_YR,
CASE WHEN LOW_STATIN = 1 	THEN DRUG_DATE ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 	THEN DRUG_DATE ELSE NULL END AS HIGH_S_DT
FROM D
)

--SELECT * FROM E
,

F AS
(
SELECT
ALF_PE,
DRUG_YR,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM E
GROUP BY ALF_PE,DRUG_YR
ORDER BY ALF_PE,DRUG_YR
)

--SELECT * FROM F
,

G AS
(
SELECT
ALF_PE,
DRUG_YR,
LOW,
HIGH,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN LOW
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN HIGH	
	WHEN LOW  IS NULL THEN HIGH	
	WHEN HIGH IS NULL THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW  IS NULL AND HIGH 	IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH IS NULL AND LOW 	IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
DRUG_YR,
STATIN_FIRST_DT,
STATIN_FIRST
FROM G
)

--SELECT * FROM H
,


I AS 
(
SELECT
	ALF_PE,
	DRUG_YR,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN) 	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B) 		AS STATIN_B
FROM D
GROUP BY ALF_PE, DRUG_YR
)

--SELECT * FROM I
,

J AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL 	THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '0' AND STATIN_B IS NOT NULL 	THEN STATIN_B	
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL 		THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM I
),

K AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM J
),

L AS
(
SELECT
K.ALF_PE,
K.DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' 	OR STATIN_B = 'LOW_STATIN') 	THEN H.STATIN_FIRST ELSE STATIN_B 		END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE STATIN_OTHER 	END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' 			OR LLT = 'LOW_STATIN') 			THEN H.STATIN_FIRST ELSE LLT 			END AS LLT
FROM K

JOIN H
ON K.ALF_PE = H.ALF_PE
AND K.DRUG_YR = H.DRUG_YR
)

SELECT
X.ALF_PE,
YR,
CASE 
	WHEN LLT IS NULL THEN 'NOTX' 
	ELSE LLT 
END AS LLT,
CASE 
	WHEN TERR_2_YEAR IS NOT NULL AND YR >= TERR_2_YEAR THEN 'POLY'
	ELSE TYPE 
END AS TYPE
FROM X_2 X

LEFT JOIN L
ON X.ALF_PE = L.ALF_PE
AND X.YR = L.DRUG_YR

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON X.ALF_PE = F.ALF_PE
;
------------------------------------------
--
SELECT COUNT(DISTINCT ALF_PE) AS COUNT, YR FROM SAILW1483V.TEMP_PREV_LLT GROUP BY YR ORDER BY YR;
--
SELECT YR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_PREV_LLT GROUP BY YR, TYPE, LLT ORDER BY YR, TYPE, LLT;
------------------------------------------
--
-- Prevalent population prescription of lipid lowering therapy by age category
---------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_LLT_AGES');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_LLT_AGES
(
	ALF_PE			BIGINT,
	YR				INTEGER,
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10),
	AGE_CAT			VARCHAR(20)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_LLT_AGES
--
WITH A AS
(
SELECT
L.*,
CASE 
	WHEN PREVALENT = 1 	THEN (YR - 2010) + AGE_ENTRY
	WHEN INCIDENT = 1 	THEN (YR - FIRST_YEAR) + AGE_ENTRY
	ELSE NULL
END AS AGE
FROM SAILW1483V.TEMP_PREV_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL M
ON L.ALF_PE = M.ALF_PE
)

SELECT
ALF_PE,
YR,
LLT,
TYPE,
CASE 
	WHEN AGE < 60 				THEN '< 60'
	WHEN AGE BETWEEN 60 AND 85 	THEN '60 - 85'
	WHEN AGE > 85 				THEN '> 85'
	ELSE NULL
END AS AGE_CAT
FROM A
;
--
SELECT * FROM SAILW1483V.TEMP_PREV_LLT_AGES;
--
------------------------------------------
--
-- Incident population prescription of lipid lowering therapy where LDL-C target was controlled
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_LLT_LDL_CTRL');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_LLT_LDL_CTRL
(
	ALF_PE			BIGINT,
	FIRST_YEAR		INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_LLT_LDL_CTRL

WITH A AS
(
SELECT
*,
DAYS(TEST) - DAYS(DIAG) AS INDEX_DIFF
FROM SAILW1483V.TEMP_LDL_CONTROL

WHERE MIN_LDL <= 1.8
),

LESS_THAN_90 AS
(
SELECT
D.ALF_PE,
D.TYPE,
D.DIAG,
D.TEST AS LOW_LDL_DATE,
D.INDEX_DIFF,
GP.EVENT_DT AS DRUG_DATE,
D.READ_CODE,
D.READ_TYPE
FROM A D 

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON D.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT > D.DIAG 
AND GP.EVENT_DT <= D.DIAG+90
AND D.INDEX_DIFF <= 90

ORDER BY D.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM LESS_THAN_90
,


GREATER_THAN_90 AS
(
SELECT
D.ALF_PE,
D.TYPE,
D.DIAG,
D.TEST AS LOW_LDL_DATE,
D.INDEX_DIFF,
GP.EVENT_DT AS DRUG_DATE,
D.READ_CODE,
D.READ_TYPE
FROM A D

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON D.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT < D.TEST
AND GP.EVENT_DT >= D.TEST-90
AND D.INDEX_DIFF > 90

ORDER BY D.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM GREATER_THAN_90
,

UNION AS
(
SELECT
*,
'LESS_THAN_90' AS SPLIT_INDEX_DIFF
FROM LESS_THAN_90

UNION

SELECT
*,
'GREATER_THAN_90' AS SPLIT_INDEX_DIFF
FROM GREATER_THAN_90
)

--SELECT * FROM UNION
--ORDER BY ALF_PE, DRUG_DATE
,

F AS 
(
SELECT
	ALF_PE,
	TYPE,
	DIAG,
	LOW_LDL_DATE,
	DRUG_DATE,	
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM UNION
)

--SELECT * FROM F
--ORDER BY ALF_PE
,

G AS
(
SELECT
ALF_PE,
TYPE,
DIAG,
LOW_LDL_DATE,
DRUG_DATE,
CASE WHEN LOW_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS HIGH_S_DT
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
TYPE,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM G
GROUP BY ALF_PE,TYPE
ORDER BY ALF_PE,TYPE
),

I AS
(
SELECT
ALF_PE,
TYPE,
LOW,
HIGH,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN LOW
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN HIGH	
	WHEN LOW  IS NULL THEN HIGH	
	WHEN HIGH IS NULL THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW  IS NULL AND HIGH 	IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH IS NULL AND LOW 	IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM H
),

J AS
(
SELECT
ALF_PE,
TYPE,
STATIN_FIRST_DT,
STATIN_FIRST
FROM I
)

--SELECT * FROM J
,


K AS 
(
SELECT
	ALF_PE,
	TYPE,
	MIN (DIAG) 			AS DIAG,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN)	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B) 		AS STATIN_B
FROM F
GROUP BY ALF_PE,TYPE
)

--SELECT * FROM J
,

L AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM K
),

M AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM L
),

N AS
(
SELECT
M.ALF_PE,
M.TYPE,
YEAR(DIAG) AS FIRST_YEAR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' OR STATIN_B = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_B END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_OTHER END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' OR LLT = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE LLT END AS LLT
FROM M

JOIN J
ON M.ALF_PE = J.ALF_PE
)

SELECT
A.ALF_PE,
CASE WHEN N.FIRST_YEAR IS NOT NULL THEN N.FIRST_YEAR ELSE YEAR(A.DIAG) END AS FIRST_YEAR,
CASE WHEN LLT IS NULL THEN 'NOTX' ELSE LLT END AS LLT,
A.TYPE
FROM A

LEFT JOIN N
ON A.ALF_PE = N.ALF_PE
AND YEAR(A.DIAG) = N.FIRST_YEAR
;
------------------------------------------
--
SELECT COUNT(*) FROM SAILW1483V.TEMP_INC_LLT_LDL_CTRL;
--
SELECT FIRST_YEAR AS YEAR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_INC_LLT_LDL_CTRL GROUP BY FIRST_YEAR, TYPE, LLT ORDER BY FIRST_YEAR, TYPE, LLT;
------------------------------------------
--
-- Incident population prescription of lipid lowering therapy where LDL-C target was not controlled
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_LLT_LDL_NO_CTRL');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_LLT_LDL_NO_CTRL
(
	ALF_PE			BIGINT,
	FIRST_YEAR		INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_LLT_LDL_NO_CTRL

WITH A AS
(
SELECT
*,
DAYS(TEST) - DAYS(DIAG) AS INDEX_DIFF
FROM SAILW1483V.TEMP_LDL_CONTROL

WHERE MIN_LDL > 1.8
),

LESS_THAN_90 AS
(
SELECT
D.ALF_PE,
D.TYPE,
D.DIAG,
D.TEST AS LOW_LDL_DATE,
D.INDEX_DIFF,
GP.EVENT_DT AS DRUG_DATE,
D.READ_CODE,
D.READ_TYPE
FROM A D 

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON D.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT > D.DIAG 
AND GP.EVENT_DT <= D.DIAG+90
AND D.INDEX_DIFF <= 90

ORDER BY D.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM LESS_THAN_90
,


GREATER_THAN_90 AS
(
SELECT
D.ALF_PE,
D.TYPE,
D.DIAG,
D.TEST AS LOW_LDL_DATE,
D.INDEX_DIFF,
GP.EVENT_DT AS DRUG_DATE,
D.READ_CODE,
D.READ_TYPE
FROM A D

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON D.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT < D.TEST
AND GP.EVENT_DT >= D.TEST-90
AND D.INDEX_DIFF > 90

ORDER BY D.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM GREATER_THAN_90
,

UNION AS
(
SELECT
*,
'LESS_THAN_90' AS SPLIT_INDEX_DIFF
FROM LESS_THAN_90

UNION

SELECT
*,
'GREATER_THAN_90' AS SPLIT_INDEX_DIFF
FROM GREATER_THAN_90
)

--SELECT * FROM UNION
--ORDER BY ALF_PE, DRUG_DATE
,

F AS 
(
SELECT
	ALF_PE,
	TYPE,
	DIAG,
	LOW_LDL_DATE,
	DRUG_DATE,	
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM UNION
)

--SELECT * FROM F
--ORDER BY ALF_PE
,

G AS
(
SELECT
ALF_PE,
TYPE,
DIAG,
LOW_LDL_DATE,
DRUG_DATE,
CASE WHEN LOW_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS HIGH_S_DT
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
TYPE,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM G
GROUP BY ALF_PE,TYPE
ORDER BY ALF_PE,TYPE
),

I AS
(
SELECT
ALF_PE,
TYPE,
LOW,
HIGH,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN LOW
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN HIGH	
	WHEN LOW  IS NULL THEN HIGH	
	WHEN HIGH IS NULL THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW  IS NULL AND HIGH 	IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH IS NULL AND LOW 	IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM H
),

J AS
(
SELECT
ALF_PE,
TYPE,
STATIN_FIRST_DT,
STATIN_FIRST
FROM I
)

--SELECT * FROM J
,


K AS 
(
SELECT
	ALF_PE,
	TYPE,
	MIN (DIAG) 			AS DIAG,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN) 	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B) 		AS STATIN_B
FROM F
GROUP BY ALF_PE,TYPE
)

--SELECT * FROM J
,

L AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM K
),

M AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM L
),

N AS
(
SELECT
M.ALF_PE,
M.TYPE,
YEAR(DIAG) AS FIRST_YEAR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' OR STATIN_B = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_B END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_OTHER END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' OR LLT = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE LLT END AS LLT
FROM M

JOIN J
ON M.ALF_PE = J.ALF_PE
)

SELECT
A.ALF_PE,
CASE WHEN N.FIRST_YEAR IS NOT NULL THEN N.FIRST_YEAR ELSE YEAR(A.DIAG) END AS FIRST_YEAR,
CASE WHEN LLT IS NULL THEN 'NOTX' ELSE LLT END AS LLT,
A.TYPE
FROM A

LEFT JOIN N
ON A.ALF_PE = N.ALF_PE
AND YEAR(A.DIAG) = N.FIRST_YEAR
;
----------------------------------
--
SELECT COUNT(*) FROM SAILW1483V.TEMP_INC_LLT_LDL_NO_CTRL;
--
SELECT FIRST_YEAR AS YEAR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_INC_LLT_LDL_NO_CTRL GROUP BY FIRST_YEAR, TYPE, LLT ORDER BY FIRST_YEAR, TYPE, LLT;
------------------------------------------
--
-- Prevalent population prescription of lipid lowering therapy where LDL-C target was controlled
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_LLT_LDL_CTRL');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_LLT_LDL_CTRL
(
	ALF_PE			BIGINT,
	YEAR			INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_LLT_LDL_CTRL

WITH A AS
(
SELECT
*
FROM SAILW1483V.TEMP_LDL_CONTROL_PREV

WHERE MIN_LDL <= 1.8
),

B AS
(
SELECT
A.ALF_PE,
A.TYPE,
A.DIAG,
A.TEST AS LOW_LDL_DATE,
GP.EVENT_DT AS DRUG_DATE,
D.READ_CODE,
D.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT < A.TEST
AND GP.EVENT_DT >= A.TEST-90

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

F AS 
(
SELECT
	ALF_PE,
	TYPE,
	DIAG,
	LOW_LDL_DATE,
	DRUG_DATE,	
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM B
)

--SELECT * FROM F
--ORDER BY ALF_PE
,

G AS
(
SELECT
ALF_PE,
TYPE,
DIAG,
LOW_LDL_DATE,
DRUG_DATE,
CASE WHEN LOW_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS HIGH_S_DT
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
TYPE,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM G
GROUP BY ALF_PE,TYPE
ORDER BY ALF_PE,TYPE
),

I AS
(
SELECT
ALF_PE,
TYPE,
LOW,
HIGH,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN LOW
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN HIGH	
	WHEN LOW  IS NULL THEN HIGH	
	WHEN HIGH IS NULL THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW  IS NULL AND HIGH 	IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH IS NULL AND LOW 	IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM H
),

J AS
(
SELECT
ALF_PE,
TYPE,
STATIN_FIRST_DT,
STATIN_FIRST
FROM I
)

--SELECT * FROM J
,


K AS 
(
SELECT
	ALF_PE,
	TYPE,
	YEAR(LOW_LDL_DATE) 	AS YEAR,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN) 	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B) 		AS STATIN_B
FROM F

GROUP BY ALF_PE, TYPE, YEAR(LOW_LDL_DATE)
)

--SELECT * FROM J
,

L AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM K
),

M AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM L
),

N AS
(
SELECT
M.ALF_PE,
M.TYPE,
YEAR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' OR STATIN_B = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_B END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_OTHER END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' OR LLT = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE LLT END AS LLT
FROM M

JOIN J
ON M.ALF_PE = J.ALF_PE
)

SELECT
A.ALF_PE,
CASE WHEN N.YEAR IS NOT NULL THEN N.YEAR ELSE YEAR(A.TEST) END AS YEAR,
CASE WHEN LLT IS NULL THEN 'NOTX' ELSE LLT END AS LLT,
A.TYPE
FROM A

LEFT JOIN N
ON A.ALF_PE = N.ALF_PE
AND YEAR(A.TEST) = N.YEAR
;
----------------------------------
--
SELECT COUNT(*) FROM SAILW1483V.TEMP_PREV_LLT_LDL_CTRL;

SELECT YEAR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_PREV_LLT_LDL_CTRL GROUP BY YEAR, TYPE, LLT ORDER BY YEAR, TYPE, LLT;
------------------------------------------
--
-- Prevalent population prescription of lipid lowering therapy where LDL-C target was not controlled
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_LLT_LDL_NO_CTRL');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_LLT_LDL_NO_CTRL
(
	ALF_PE			BIGINT,
	YEAR			INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_LLT_LDL_NO_CTRL

WITH A AS
(
SELECT
*
FROM SAILW1483V.TEMP_LDL_CONTROL_PREV

WHERE MIN_LDL > 1.8
),

B AS
(
SELECT
A.ALF_PE,
A.TYPE,
A.DIAG,
A.TEST AS LOW_LDL_DATE,
GP.EVENT_DT AS DRUG_DATE,
D.READ_CODE,
D.READ_TYPE
FROM A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT < A.TEST
AND GP.EVENT_DT >= A.TEST-90

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

F AS 
(
SELECT
	ALF_PE,
	TYPE,
	DIAG,
	LOW_LDL_DATE,
	DRUG_DATE,	
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM B
)

--SELECT * FROM F
--ORDER BY ALF_PE
,

G AS
(
SELECT
ALF_PE,
TYPE,
DIAG,
LOW_LDL_DATE,
DRUG_DATE,
CASE WHEN LOW_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 THEN DRUG_DATE ELSE NULL END AS HIGH_S_DT
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
TYPE,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM G
GROUP BY ALF_PE,TYPE
ORDER BY ALF_PE,TYPE
),

I AS
(
SELECT
ALF_PE,
TYPE,
LOW,
HIGH,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN LOW
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN HIGH	
	WHEN LOW  IS NULL THEN HIGH	
	WHEN HIGH IS NULL THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW  IS NULL AND HIGH 	IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH IS NULL AND LOW 	IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM H
),

J AS
(
SELECT
ALF_PE,
TYPE,
STATIN_FIRST_DT,
STATIN_FIRST
FROM I
)

--SELECT * FROM J
,


K AS 
(
SELECT
	ALF_PE,
	TYPE,
	YEAR(LOW_LDL_DATE)	AS YEAR,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN) 	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B) 		AS STATIN_B
FROM F

GROUP BY ALF_PE, TYPE, YEAR(LOW_LDL_DATE)
)

--SELECT * FROM J
,

L AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM K
),

M AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM L
),

N AS
(
SELECT
M.ALF_PE,
M.TYPE,
YEAR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' OR STATIN_B = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_B END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE STATIN_OTHER END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' OR LLT = 'LOW_STATIN') THEN J.STATIN_FIRST ELSE LLT END AS LLT
FROM M

JOIN J
ON M.ALF_PE = J.ALF_PE
)

SELECT
A.ALF_PE,
CASE WHEN N.YEAR IS NOT NULL THEN N.YEAR ELSE YEAR(A.TEST) END AS YEAR,
CASE WHEN LLT IS NULL THEN 'NOTX' ELSE LLT END AS LLT,
A.TYPE
FROM A

LEFT JOIN N
ON A.ALF_PE = N.ALF_PE
AND YEAR(A.TEST) = N.YEAR
;
----------------------------------
--
SELECT COUNT(*) FROM SAILW1483V.TEMP_PREV_LLT_LDL_NO_CTRL;

SELECT YEAR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_PREV_LLT_LDL_NO_CTRL GROUP BY YEAR, TYPE, LLT ORDER BY YEAR, TYPE, LLT;
------------------------------------------
--
-- Prevalent population prescription of lipid lowering therapy for poly-vascular disease patients with PAD
------------------------------------------

CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LLT_POLY_PAD_PREV');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LLT_POLY_PAD_PREV
(
	ALF_PE			BIGINT,
	DRUG_YR			INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(10)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LLT_POLY_PAD_PREV

WITH A AS
(
SELECT
D.ALF_PE,
YEAR,
CASE 
	WHEN TERR_3_TYPE IS NULL THEN TERR_2_TYPE 
	ELSE TERR_3_TYPE 
END AS TYPE
FROM SAILW1483V.DYNAMIC_COHORT_MASTER_365 D

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON D.ALF_PE = F.ALF_PE

WHERE (TERR_3_TYPE LIKE('%PAD%') OR TERR_2_TYPE LIKE('%PAD%'))
AND D.YEAR <> F.FIRST_YEAR
),

B AS
(
SELECT
A.ALF_PE,
A.YEAR,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM A 

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT BETWEEN CAST(A.YEAR || '-01-01' AS DATE) AND CAST(A.YEAR || '-12-31' AS DATE)

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

D AS 
(
SELECT
	ALF_PE,
	EVENT_DT AS DRUG_DT,
	YEAR(EVENT_DT) AS DRUG_YR,
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM B
)

--SELECT * FROM D
--ORDER BY ALF_PE
,

E AS
(
SELECT
ALF_PE,
DRUG_DT,
DRUG_YR,
CASE WHEN LOW_STATIN = 1 THEN DRUG_DT ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 THEN DRUG_DT ELSE NULL END AS HIGH_S_DT
FROM D
)

--SELECT * FROM E
,

F AS
(
SELECT
ALF_PE,
DRUG_YR,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM E
GROUP BY ALF_PE,DRUG_YR
ORDER BY ALF_PE,DRUG_YR
)

--SELECT * FROM F
,

G AS
(
SELECT
ALF_PE,
DRUG_YR,
LOW,
HIGH,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN LOW
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN HIGH	
	WHEN LOW  IS NULL THEN HIGH	
	WHEN HIGH IS NULL THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW  IS NULL AND HIGH 	IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH IS NULL AND LOW 	IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
DRUG_YR,
STATIN_FIRST_DT,
STATIN_FIRST
FROM G
)

--SELECT * FROM H
,


I AS 
(
SELECT
	ALF_PE,
	DRUG_YR,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN) 	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B)		AS STATIN_B
FROM D

GROUP BY ALF_PE, DRUG_YR
)

--SELECT * FROM I
,

J AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '0' AND STATIN_B IS NOT NULL THEN STATIN_B	
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM I
),

K AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM J
),

L AS
(
SELECT
K.ALF_PE,
K.DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' OR STATIN_B = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE STATIN_B END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE STATIN_OTHER END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' OR LLT = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE LLT END AS LLT
FROM K

JOIN H
ON K.ALF_PE = H.ALF_PE
AND K.DRUG_YR = H.DRUG_YR
),

M AS
(
SELECT
L.*,
CASE 
	WHEN LLT = 'STATIN_COMBI' 	THEN 5
	WHEN LLT = 'HIGH_STATIN' 	THEN 4
	WHEN LLT = 'LOW_STATIN' 	THEN 3
	WHEN LLT = 'OTHER' 			THEN 2
	WHEN LLT = 'NOTX' 			THEN 1	
END AS LLT_RANK
FROM L
),

N AS
(
SELECT
ALF_PE,
DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
STATIN_B,
STATIN_OTHER,	
LLT
FROM M
WHERE NOT EXISTS -- This filter translates to 'fetch all rows from the table where the corresponding field has no larger record'
	(SELECT 
		1 
	FROM M M2 
	WHERE M2.ALF_PE = M.ALF_PE 
	AND M2.LLT_RANK > M.LLT_RANK
	)
)

--SELECT * FROM N
,

O AS
(
SELECT
ALF_PE,
DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
STATIN_B,
STATIN_OTHER,	
LLT
FROM
(
SELECT
*,
ROW_NUMBER() OVER(PARTITION BY ALF_PE,DRUG_YR ORDER BY ALF_PE,DRUG_YR) AS RANK
FROM N
)
WHERE RANK = 1
)

--SELECT * FROM O

SELECT
A.ALF_PE,
CASE WHEN O.DRUG_YR IS NULL THEN A.YEAR ELSE O.DRUG_YR END AS DRUG_YR,
CASE WHEN O.LLT IS NULL THEN 'NOTX' ELSE O.LLT END AS LLT,
A.TYPE
FROM A

LEFT JOIN O
ON A.ALF_PE = O.ALF_PE
AND A.YEAR = O.DRUG_YR
;
----------------------------------
--
SELECT * FROM SAILW1483V.TEMP_LLT_POLY_PAD_PREV;
--
SELECT COUNT(*) FROM SAILW1483V.TEMP_LLT_POLY_PAD_PREV;
--
SELECT DRUG_YR AS YEAR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_LLT_POLY_PAD_PREV GROUP BY DRUG_YR, TYPE, LLT ORDER BY DRUG_YR, TYPE, LLT;
------------------------------------------
--
-- Incident population prescription of lipid lowering therapy for poly-vascular disease patients with PAD
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_LLT_POLY_PAD_INC');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_LLT_POLY_PAD_INC
(
	ALF_PE			BIGINT,
	DRUG_YR			INTEGER,	
	LLT				VARCHAR(20),
	TYPE			VARCHAR(20)
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_LLT_POLY_PAD_INC

WITH A AS
(
SELECT
D.ALF_PE,
YEAR,
CASE WHEN TERR_3_TYPE IS NULL THEN TERR_2_TYPE ELSE TERR_3_TYPE END AS TYPE
FROM SAILW1483V.DYNAMIC_COHORT_MASTER_365 D

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON D.ALF_PE = F.ALF_PE

WHERE (TERR_3_TYPE LIKE('%PAD%') OR TERR_2_TYPE LIKE('%PAD%'))
AND D.YEAR = F.FIRST_YEAR
),

B AS
(
SELECT
A.ALF_PE,
A.YEAR,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM A 

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE GP.EVENT_DT BETWEEN CAST(A.YEAR || '-01-01' AS DATE) AND CAST(A.YEAR || '-12-31' AS DATE)

ORDER BY A.ALF_PE, GP.EVENT_DT
)

--SELECT * FROM B
,

D AS 
(
SELECT
	ALF_PE,
	EVENT_DT AS DRUG_DT,
	YEAR(EVENT_DT) AS DRUG_YR,
	READ_TYPE,
	CASE
		WHEN READ_TYPE = 'HIGH_STATIN' THEN '1'
		ELSE '0'
	END AS HIGH_STATIN,
	CASE
		WHEN READ_TYPE = 'LOW_STATIN' THEN '1'
		ELSE '0'
	END AS LOW_STATIN ,
	CASE
		WHEN (READ_TYPE = 'HIGH_STATIN' OR READ_TYPE = 'LOW_STATIN' ) THEN '1'
		ELSE '0'
	END AS ANY_STATIN,
	CASE
		WHEN READ_TYPE = 'INEGY' THEN '1'
		ELSE '0'
	END AS INEGY,
	CASE
		WHEN READ_TYPE = 'EZETIMIBE' THEN '1'
		ELSE '0'
	END AS EZETIMIBE,
	CASE
		WHEN READ_TYPE = 'FIBRATE' THEN '1'
		ELSE '0'
	END AS FIBRATE,
	CASE
		WHEN READ_TYPE IN ('FIBRATE','EZETIMIBE') THEN '1'
		ELSE '0'
	END AS EZET_FIBR
	,
	CASE
		WHEN READ_CODE IN ('bxi1.','bxi2.','bxkx.','bxkw.','bxk4.','bxk1.',
						  'bxi4.','bxi5.','bxi3.','bxiz.','bxky.','bxkz.',
						  'bxi6.','bxi7.','bxk2.','bxk3.')
		OR READ_CODE LIKE 'bxd%'
		OR READ_CODE LIKE 'bxe%'
		OR READ_CODE LIKE 'bxg%'
		OR READ_CODE LIKE 'bxj%' THEN READ_TYPE
		ELSE NULL
	END AS STATIN_B
FROM B
)

--SELECT * FROM D
--ORDER BY ALF_PE
,

E AS
(
SELECT
ALF_PE,
DRUG_DT,
DRUG_YR,
CASE WHEN LOW_STATIN = 1 THEN DRUG_DT ELSE NULL END AS LOW_S_DT,
CASE WHEN HIGH_STATIN = 1 THEN DRUG_DT ELSE NULL END AS HIGH_S_DT
FROM D
)

--SELECT * FROM E
,

F AS
(
SELECT
ALF_PE,
DRUG_YR,
MIN(LOW_S_DT) AS LOW,
MIN(HIGH_S_DT) AS HIGH
FROM E
GROUP BY ALF_PE,DRUG_YR
ORDER BY ALF_PE,DRUG_YR
)

--SELECT * FROM F
,

G AS
(
SELECT
ALF_PE,
DRUG_YR,
LOW,
HIGH,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN LOW
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN HIGH	
	WHEN LOW  IS NULL THEN HIGH	
	WHEN HIGH IS NULL THEN LOW
	ELSE NULL
END AS STATIN_FIRST_DT,
CASE 
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) <  DAYS(HIGH) THEN 'LOW_STATIN'
	WHEN LOW IS NOT NULL AND HIGH IS NOT NULL AND DAYS(LOW) >= DAYS(HIGH) THEN 'HIGH_STATIN'	
	WHEN LOW  IS NULL AND HIGH 	IS NOT NULL THEN 'HIGH_STATIN'	
	WHEN HIGH IS NULL AND LOW 	IS NOT NULL THEN 'LOW_STATIN'
	ELSE NULL
END AS STATIN_FIRST
FROM F
)

--SELECT * FROM G
,

H AS
(
SELECT
ALF_PE,
DRUG_YR,
STATIN_FIRST_DT,
STATIN_FIRST
FROM G
)

--SELECT * FROM H
,


I AS 
(
SELECT
	ALF_PE,
	DRUG_YR,
	MAX (HIGH_STATIN) 	AS HIGH_STATIN,
	MAX (LOW_STATIN) 	AS LOW_STATIN,
	MAX (ANY_STATIN) 	AS ANY_STATIN,
	MAX (INEGY) 		AS INEGY,
	MAX (EZETIMIBE) 	AS EZETIMIBE,
	MAX (FIBRATE) 		AS FIBRATE,	
	MAX (EZET_FIBR) 	AS EZET_FIBR,
	MAX (STATIN_B) 		AS STATIN_B
FROM D
GROUP BY ALF_PE, DRUG_YR
)

--SELECT * FROM I
,

J AS 
(
SELECT
	*,
	CASE
		WHEN EZET_FIBR = '1' AND STATIN_B IS NOT NULL THEN 'STATIN_COMBI'
		WHEN EZET_FIBR = '0' AND STATIN_B IS NOT NULL THEN STATIN_B	
		WHEN EZET_FIBR = '1' AND STATIN_B IS NULL THEN 'OTHER'
		ELSE STATIN_B
	END AS STATIN_OTHER
FROM I
),

K AS
(
SELECT
	*,
	CASE
		WHEN STATIN_OTHER IS NOT NULL THEN STATIN_OTHER
		ELSE 'NOTX'
	END AS LLT
FROM J
),

L AS
(
SELECT
K.ALF_PE,
K.DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
CASE WHEN (STATIN_B = 'HIGH_STATIN' OR STATIN_B = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE STATIN_B END AS STATIN_B,
CASE WHEN (STATIN_OTHER = 'HIGH_STATIN' OR STATIN_OTHER = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE STATIN_OTHER END AS STATIN_OTHER,	
CASE WHEN (LLT = 'HIGH_STATIN' OR LLT = 'LOW_STATIN') THEN H.STATIN_FIRST ELSE LLT END AS LLT
FROM K

JOIN H
ON K.ALF_PE = H.ALF_PE
AND K.DRUG_YR = H.DRUG_YR
),

M AS
(
SELECT
L.*,
CASE 
	WHEN LLT = 'STATIN_COMBI' 	THEN 5
	WHEN LLT = 'HIGH_STATIN' 	THEN 4
	WHEN LLT = 'LOW_STATIN'	 	THEN 3
	WHEN LLT = 'OTHER' 			THEN 2
	WHEN LLT = 'NOTX' 			THEN 1	
END AS LLT_RANK
FROM L
),

N AS
(
SELECT
ALF_PE,
DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
STATIN_B,
STATIN_OTHER,	
LLT
FROM M
WHERE NOT EXISTS -- This filter translates to 'fetch all rows from the table where the corresponding field has no larger record'
	(SELECT 
		1 
	FROM M M2 
	WHERE M2.ALF_PE = M.ALF_PE 
	AND M2.LLT_RANK > M.LLT_RANK
	)
)

--SELECT * FROM N
,

O AS
(
SELECT
ALF_PE,
DRUG_YR,
HIGH_STATIN,
LOW_STATIN,
ANY_STATIN,
INEGY,
EZETIMIBE,
FIBRATE,	
EZET_FIBR,
STATIN_B,
STATIN_OTHER,	
LLT
FROM
(
SELECT
*,
ROW_NUMBER() OVER(PARTITION BY ALF_PE,DRUG_YR ORDER BY ALF_PE,DRUG_YR) AS RANK
FROM N
)
WHERE RANK = 1
)

--SELECT * FROM O

SELECT
A.ALF_PE,
CASE WHEN O.DRUG_YR IS NULL THEN A.YEAR ELSE O.DRUG_YR END AS DRUG_YR,
CASE WHEN O.LLT IS NULL THEN 'NOTX' ELSE O.LLT END AS LLT,
CASE WHEN A.TYPE LIKE('%IHD%') THEN 'Including IHD' ELSE 'Not including IHD' END AS TYPE
FROM A

LEFT JOIN O
ON A.ALF_PE = O.ALF_PE
AND A.YEAR = O.DRUG_YR
;
----------------------------------
--
SELECT * FROM SAILW1483V.TEMP_LLT_POLY_PAD_INC;
--
SELECT COUNT(*) FROM SAILW1483V.TEMP_LLT_POLY_PAD_INC;
--
SELECT DRUG_YR AS YEAR, LLT, TYPE, COUNT(LLT) AS LLT FROM SAILW1483V.TEMP_LLT_POLY_PAD_INC GROUP BY DRUG_YR, TYPE, LLT ORDER BY DRUG_YR, TYPE, LLT;
---------------------------------------------
--
-- Prevalent cases that did not receive high-intensity statin therapy in 2022 but had received at any point prior
---------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT

WHERE LLT <> 'HIGH_STATIN' AND YR = 2022
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2022
AND READ_TYPE = 'HIGH_STATIN'

ORDER BY A.ALF_PE, GP.EVENT_DT
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2022-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN;
------------------------------------------
--
-- Prevalent cases that did not receive high-intensity statin therapy in 2010 but had received at any point prior
---------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT 

WHERE LLT <> 'HIGH_STATIN' AND YR = 2010
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2010
AND READ_TYPE = 'HIGH_STATIN'

ORDER BY A.ALF_PE, GP.EVENT_DT
),

COUNT AS
(
SELECT
COUNT(DISTINCT ALF_PE) AS COUNT
FROM DRUGS
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN;
------------------------------------------
--
-- Incident cases that did not receive high-intensity statin therapy in 2021 but had received at any point prior
---------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2021_NO_HI_STATIN');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2021_NO_HI_STATIN
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2021_NO_HI_STATIN
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT <> 'HIGH_STATIN' 
AND DRUG_YR = 2021
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2021
AND READ_TYPE = 'HIGH_STATIN'

ORDER BY A.ALF_PE, GP.EVENT_DT
),

COUNT AS
(
SELECT
COUNT(DISTINCT ALF_PE) AS COUNT
FROM DRUGS
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2021-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2021_NO_HI_STATIN;
------------------------------------------
--
-- Incident cases that did not receive high-intensity statin therapy in 2010 but had received at any point prior
---------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2010_NO_HI_STATIN');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2010_NO_HI_STATIN
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2010_NO_HI_STATIN
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT <> 'HIGH_STATIN' 
AND DRUG_YR = 2010
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2010
AND READ_TYPE = 'HIGH_STATIN'

ORDER BY A.ALF_PE, GP.EVENT_DT
),

COUNT AS
(
SELECT
COUNT(DISTINCT ALF_PE) AS COUNT
FROM DRUGS
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
-------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2010_NO_HI_STATIN;
------------------------------------------
--
-- Prevalent cases that did not receive any lipid lowering therapy in 2022 but had received statin therapy any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2022_NO_TREAT');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2022_NO_TREAT
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2022_NO_TREAT
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT

WHERE LLT = 'NOTX' AND YR = 2022
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2022
AND READ_TYPE IN('HIGH_STATIN','LOW_STATIN')

ORDER BY A.ALF_PE, GP.EVENT_DT
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2022-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2022_NO_TREAT;
------------------------------------------
--
-- Prevalent cases that did not receive any lipid lowering therapy in 2010 but had received statin therapy at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2010_NO_TREAT');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2010_NO_TREAT
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2010_NO_TREAT
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT 

WHERE LLT = 'NOTX' AND YR = 2010
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2010
AND READ_TYPE IN('HIGH_STATIN','LOW_STATIN')

ORDER BY A.ALF_PE, GP.EVENT_DT
),

COUNT AS
(
SELECT
COUNT(DISTINCT ALF_PE) AS COUNT
FROM DRUGS
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2010_NO_TREAT;
------------------------------------------
--
-- Incident cases that did not receive any lipid lowering therapy in 2021 but had received statin therapy at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2021_NO_TREAT');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2021_NO_TREAT
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2021_NO_TREAT
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT = 'NOTX' 
AND DRUG_YR = 2021
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2021
AND READ_TYPE IN('HIGH_STATIN','LOW_STATIN')

ORDER BY A.ALF_PE, GP.EVENT_DT
),

COUNT AS
(
SELECT
COUNT(DISTINCT ALF_PE) AS COUNT
FROM DRUGS
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2021-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2021_NO_TREAT;
------------------------------------------
--
-- Incident cases that did not receive any lipid lowering therapy in 2010 but had received statin therapy at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2010_NO_TREAT');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2010_NO_TREAT
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2010_NO_TREAT
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT = 'NOTX' 
AND DRUG_YR = 2010
),

DRUGS AS
(
SELECT
A.ALF_PE,
GP.EVENT_DT,
GP.EVENT_VAL,
D.READ_TYPE,
D.READ_CODE
FROM NO_LLT A

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON A.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_DRUG_READ D
ON GP.EVENT_CD = D.READ_CODE

WHERE YEAR(GP.EVENT_DT) < 2010
AND READ_TYPE IN('HIGH_STATIN','LOW_STATIN')

ORDER BY A.ALF_PE, GP.EVENT_DT
),

COUNT AS
(
SELECT
COUNT(DISTINCT ALF_PE) AS COUNT
FROM DRUGS
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DRUGS
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2010_NO_TREAT;
------------------------------------------
--
-- Prevalent cases that did not receive high-intensity statin therapy in 2022 and had not received at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT

WHERE LLT <> 'HIGH_STATIN' AND YR = 2022
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2022-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2022_NO_HI_STATIN_N;
------------------------------------------
--
-- Prevalent cases that did not receive high-intensity statin therapy in 2010 and had not received at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT 

WHERE LLT <> 'HIGH_STATIN' AND YR = 2010
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2010_NO_HI_STATIN_N;
------------------------------------------
--
-- Incident cases that did not receive high-intensity statin therapy in 2021 and had not received at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2021_NO_HI_STATIN_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2021_NO_HI_STATIN_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2021_NO_HI_STATIN_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT <> 'HIGH_STATIN' 
AND DRUG_YR = 2021
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_INC_2021_NO_HI_STATIN
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2021-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2021_NO_HI_STATIN_N;
------------------------------------------
--
-- Incident cases that did not receive high-intensity statin therapy in 2010 and had not received at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2010_NO_HI_STATIN_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2010_NO_HI_STATIN_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2010_NO_HI_STATIN_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT <> 'HIGH_STATIN' 
AND DRUG_YR = 2010
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_INC_2010_NO_HI_STATIN
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2010_NO_HI_STATIN_N;
------------------------------------------
--
-- Prevalent cases that did not receive any lipid lowering therapy in 2022 and had not received statin therapy at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2022_NO_TREAT_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2022_NO_TREAT_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2022_NO_TREAT_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT

WHERE LLT = 'NOTX' AND YR = 2022
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_PREV_2022_NO_TREAT
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2022-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2022_NO_TREAT_N;
------------------------------------------
--
-- Prevalent cases that did not receive any lipid lowering therapy in 2010 and had not received statin therapy at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_PREV_2010_NO_TREAT_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_PREV_2010_NO_TREAT_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_PREV_2010_NO_TREAT_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT ALF_PE
FROM SAILW1483V.TEMP_PREV_LLT 

WHERE LLT = 'NOTX' AND YR = 2010
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_PREV_2010_NO_TREAT
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_PREV_2010_NO_TREAT_N;
------------------------------------------
--
-- Incident cases that did not receive any lipid lowering therapy in 2021 and had not received statin therapy at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2021_NO_TREAT_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2021_NO_TREAT_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2021_NO_TREAT_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT = 'NOTX' 
AND DRUG_YR = 2021
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_INC_2021_NO_TREAT
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2021-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2021_NO_TREAT_N;
------------------------------------------
--
-- Incident cases that did not receive any lipid lowering therapy in 2010 and had not received statin therapy at any point prior
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.TEMP_INC_2010_NO_TREAT_N');
COMMIT;
------------------------------------------ 
--
-- Create Table
CREATE TABLE SAILW1483V.TEMP_INC_2010_NO_TREAT_N
(
	ALF_PE				BIGINT,
	CENSOR_DATE			DATE,
	FIRST_REC			DATE,
	FOLLOW_UP_DAYS		INTEGER,
	FOLLOW_UP_YRS		INTEGER
) 
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.TEMP_INC_2010_NO_TREAT_N
--
WITH NO_LLT AS
(
SELECT 
DISTINCT L.ALF_PE
FROM SAILW1483V.TEMP_INC_LLT L

LEFT JOIN SAILW1483V.COHORT_MASTER_FINAL F
ON L.ALF_PE = F.ALF_PE

WHERE STUDY_365D_FOLLOW_UP = 1
AND LLT = 'NOTX' 
AND DRUG_YR = 2010
),

DID AS
(
SELECT
ALF_PE
FROM
SAILW1483V.TEMP_INC_2010_NO_TREAT
),


DIDNT AS
(
SELECT
N.ALF_PE
FROM NO_LLT N

LEFT JOIN DID D
ON N.ALF_PE = D.ALF_PE

WHERE D.ALF_PE IS NULL
),

FOLLOW_UP AS
(
SELECT
D.ALF_PE,
D.CENSOR_DATE,
MIN(GP.START_DATE) AS FIRST_REC
FROM 
(
SELECT
DISTINCT ALF_PE,
'2010-01-01' AS CENSOR_DATE
FROM DIDNT
) D

JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN GP
ON D.ALF_PE = GP.ALF_PE

GROUP BY D.ALF_PE,D.CENSOR_DATE
ORDER BY D.ALF_PE
)

SELECT
ALF_PE,
CENSOR_DATE,
FIRST_REC,
DAYS(CENSOR_DATE) - DAYS(FIRST_REC) AS FOLLOW_UP_DAYS,
(DAYS(CENSOR_DATE) - DAYS(FIRST_REC))/365 AS FOLLOW_UP_YRS
FROM FOLLOW_UP
;
------------------------------------------
--
SELECT * FROM SAILW1483V.TEMP_INC_2010_NO_TREAT_N;
------------------------------------------