--
--
------------------------------------------
--
-- Script:			08_COHORT_EXCLUSIONS.sql
-- SAIL project:	1483 - Cardiovascular disease risk prediction and optimisation of risk factor management
--
-- About:			Excluding patients from cohort according to consort diagram
-- Author:			Daniel King
------------------------------------------
--
-- Excluding cases with a pre-2000 diagnosis who entered as an incident case 
------------------------------------------
--
-- Declare variable for study start date
CREATE OR REPLACE VARIABLE SAILW1483V.STUDY_START_DATE DATE DEFAULT '2010-01-01';
------------------------------------------
--
--Drop Tables
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_ALF_MID_CONSORT');
COMMIT;
------------------------------------------
--
--Create Main Table
CREATE TABLE SAILW1483V.PREP_ALF_MID_CONSORT
(
	ALF_PE		BIGINT
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_ALF_MID_CONSORT
--
WITH 
PRE_2000_ADMIS_PEDW AS
( 
SELECT
	SPELL.ALF_PE,
	SPELL.ADMIS_DT AS DATE,
	DIAG.DIAG_CD_123 AS CODE,
	ICD.ICD_TYPE AS TYPE

FROM SAILW1483V.EXTRACT_PEDW_SPELL SPELL
	
LEFT JOIN SAILW1483V.EXTRACT_PEDW_EPISODE EPI
	ON SPELL.PROV_UNIT_CD = EPI.PROV_UNIT_CD 
	AND SPELL.SPELL_NUM_PE = EPI.SPELL_NUM_PE
	
LEFT JOIN SAILW1483V.EXTRACT_PEDW_DIAG DIAG
	ON EPI.PROV_UNIT_CD = DIAG.PROV_UNIT_CD
	AND EPI.SPELL_NUM_PE = DIAG.SPELL_NUM_PE
	AND EPI.EPI_NUM = DIAG.EPI_NUM
	
JOIN SAILW1483V.PREP_ALF_TOP_CONSORT A
ON SPELL.ALF_PE = A.ALF_PE	

JOIN SAILW1483V.PHEN_ASCVD_ICD10 ICD
ON DIAG.DIAG_CD_123 = ICD.DIAG_CD_123 

WHERE SPELL.ADMIS_DT BETWEEN '1990-01-01' AND SAILW1483V.START_DATE
),

PRE_2000_ADMIS_GP AS
(
SELECT
	GP.ALF_PE,
	GP.EVENT_DT AS DATE,
	GP.EVENT_CD AS CODE,
	R.READ_TYPE AS TYPE
FROM SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP

JOIN SAILW1483V.PREP_ALF_TOP_CONSORT A
ON GP.ALF_PE = A.ALF_PE	

JOIN SAILW1483V.PHEN_ASCVD_READ R
ON GP.EVENT_CD = R.READ_CODE 

WHERE GP.EVENT_DT BETWEEN '1990-01-01' AND SAILW1483V.START_DATE
),

X AS
(
SELECT 
	DISTINCT ALF_PE
FROM PRE_2000_ADMIS_PEDW

UNION

SELECT 
	DISTINCT ALF_PE
FROM PRE_2000_ADMIS_GP GP
),

GP_DIAG_PREV AS
(
SELECT
X.ALF_PE,
GP.EVENT_DT,
GP.EVENT_CD,
R.READ_TYPE
FROM X

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON X.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_ASCVD_READ R
ON GP.EVENT_CD = R.READ_CODE 

WHERE GP.EVENT_DT BETWEEN SAILW1483V.START_DATE AND SAILW1483V.SPLIT_DATE
),

PEDW_DIAG_PREV AS
(
SELECT
X.ALF_PE,
SPELL.ADMIS_DT,
DIAG.DIAG_CD_123,
ICD.ICD_TYPE
FROM X

JOIN SAILW1483V.EXTRACT_PEDW_SPELL SPELL
ON X.ALF_PE = SPELL.ALF_PE

LEFT JOIN SAILW1483V.EXTRACT_PEDW_EPISODE EPI
	ON SPELL.PROV_UNIT_CD = EPI.PROV_UNIT_CD 
	AND SPELL.SPELL_NUM_PE = EPI.SPELL_NUM_PE

LEFT JOIN SAILW1483V.EXTRACT_PEDW_DIAG DIAG
	ON EPI.PROV_UNIT_CD = DIAG.PROV_UNIT_CD
	AND EPI.SPELL_NUM_PE = DIAG.SPELL_NUM_PE
	AND EPI.EPI_NUM = DIAG.EPI_NUM

JOIN SAILW1483V.PHEN_ASCVD_ICD10 ICD
ON DIAG.DIAG_CD_123 = ICD.DIAG_CD_123 

WHERE SPELL.ADMIS_DT BETWEEN SAILW1483V.START_DATE AND SAILW1483V.SPLIT_DATE
),

GP_DIAG_INC AS
(
SELECT
X.ALF_PE,
GP.EVENT_DT,
GP.EVENT_CD,
R.READ_TYPE
FROM X

JOIN SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP
ON X.ALF_PE = GP.ALF_PE

JOIN SAILW1483V.PHEN_ASCVD_READ R
ON GP.EVENT_CD = R.READ_CODE 

WHERE GP.EVENT_DT BETWEEN SAILW1483V.STUDY_START_DATE AND SAILW1483V.END_DATE
),

PEDW_DIAG_INC AS
(
SELECT
X.ALF_PE,
SPELL.ADMIS_DT,
DIAG.DIAG_CD_123,
ICD.ICD_TYPE
FROM X

JOIN SAILW1483V.EXTRACT_PEDW_SPELL SPELL
ON X.ALF_PE = SPELL.ALF_PE

LEFT JOIN SAILW1483V.EXTRACT_PEDW_EPISODE EPI
	ON SPELL.PROV_UNIT_CD = EPI.PROV_UNIT_CD 
	AND SPELL.SPELL_NUM_PE = EPI.SPELL_NUM_PE

LEFT JOIN SAILW1483V.EXTRACT_PEDW_DIAG DIAG
	ON EPI.PROV_UNIT_CD = DIAG.PROV_UNIT_CD
	AND EPI.SPELL_NUM_PE = DIAG.SPELL_NUM_PE
	AND EPI.EPI_NUM = DIAG.EPI_NUM

JOIN SAILW1483V.PHEN_ASCVD_ICD10 ICD
ON DIAG.DIAG_CD_123 = ICD.DIAG_CD_123 

WHERE SPELL.ADMIS_DT BETWEEN SAILW1483V.STUDY_START_DATE AND SAILW1483V.END_DATE
),

GP_INC_ONLY AS
(
SELECT
DISTINCT ALF_PE
FROM GP_DIAG_INC
WHERE ALF_PE NOT IN (SELECT ALF_PE FROM GP_DIAG_PREV) 
),

PEDW_INC_ONLY AS
(
SELECT
DISTINCT ALF_PE
FROM PEDW_DIAG_INC
WHERE ALF_PE NOT IN (SELECT ALF_PE FROM PEDW_DIAG_PREV) 
),

UNION AS
(
SELECT 
ALF_PE 
FROM GP_INC_ONLY

UNION 

SELECT 
ALF_PE
FROM PEDW_INC_ONLY
)

SELECT
ALF_PE
FROM SAILW1483V.PREP_ALF_TOP_CONSORT A	

WHERE A.ALF_PE NOT IN(SELECT ALF_PE FROM UNION)
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_ALF_MID_CONSORT
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_ALF_MID_CONSORT
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_ALF_MID_CONSORT
;
------------------------------------------
--
-- Excluding cases with a diagnosis before the age of 18
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_ALF_OVER18');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_ALF_OVER18
(
	ALF_PE		BIGINT
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_ALF_OVER18
--
-- Returning ALFs who were aged >= 18 at first diagnosis of ASCVD
--
WITH 
FIRST_ADMIS_PEDW AS
(
SELECT
	SPELL.ALF_PE,
	MIN(SPELL.ADMIS_DT) AS ADMIS_DT
FROM SAILW1483V.EXTRACT_PEDW_SPELL SPELL

WHERE SPELL.ADMIS_DT BETWEEN SAILW1483V.START_DATE AND SAILW1483V.END_DATE

GROUP BY SPELL.ALF_PE
),

ADMIS_AGE_PEDW AS
(
SELECT 
	FIRST_ADMIS.ALF_PE,
	FIRST_ADMIS.ADMIS_DT,
	EPI.AGE_EPI_STR_YR AS AGE
FROM SAILW1483V.EXTRACT_PEDW_SPELL SPELL

JOIN FIRST_ADMIS_PEDW FIRST_ADMIS
	ON SPELL.ALF_PE = FIRST_ADMIS.ALF_PE
	AND SPELL.ADMIS_DT = FIRST_ADMIS.ADMIS_DT

LEFT JOIN SAILW1483V.EXTRACT_PEDW_EPISODE EPI 
	ON SPELL.PROV_UNIT_CD = EPI.PROV_UNIT_CD
	AND SPELL.SPELL_NUM_PE = EPI.SPELL_NUM_PE
),

OVER_18_PEDW AS
(
SELECT
	A.ALF_PE,
	A.ADMIS_DT
FROM ADMIS_AGE_PEDW A
WHERE 
	AGE >= 18
),

FIRST_ADMIS_GP AS
(
SELECT
	GP.ALF_PE,
	MIN(GP.EVENT_DT) AS EVENT_DT
FROM SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP

WHERE GP.EVENT_DT BETWEEN SAILW1483V.START_DATE AND SAILW1483V.END_DATE

GROUP BY GP.ALF_PE
),

ADMIS_AGE_GP AS
(
SELECT 
	FIRST_ADMIS_GP.ALF_PE,
	GP.WOB,
	FIRST_ADMIS_GP.EVENT_DT,
	CASE WHEN (GP.WOB + 18 YEARS) < FIRST_ADMIS_GP.EVENT_DT THEN 1 ELSE 0 END AS AGED_18
FROM SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP

JOIN FIRST_ADMIS_GP 
ON GP.ALF_PE = FIRST_ADMIS_GP.ALF_PE 
AND GP.EVENT_DT = FIRST_ADMIS_GP.EVENT_DT
),

OVER_18_GP AS
(
SELECT
	GP.ALF_PE,
	GP.EVENT_DT
FROM ADMIS_AGE_GP GP
WHERE 
	AGED_18 = 1
),

OVER_18_ALL AS
(
SELECT 
	PEDW.ALF_PE,
	PEDW.ADMIS_DT AS FIRST_DATE
FROM OVER_18_PEDW PEDW

UNION ALL

SELECT 
	GP.ALF_PE,
	GP.EVENT_DT AS FIRST_DATE
FROM OVER_18_GP GP
)

SELECT
	ALF_PE
FROM OVER_18_ALL

WHERE 
	ALF_PE IN(SELECT * FROM SAILW1483V.PREP_ALF_MID_CONSORT)

GROUP BY ALF_PE
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_ALF_OVER18
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_ALF_OVER18
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_ALF_OVER18
;
------------------------------------------
--
-- Splitting cohort into incident and prevalent cases
------------------------------------------
--
-- Declare variable for day before study period start
CREATE OR REPLACE VARIABLE SAILW1483V.SPLIT_DATE DATE DEFAULT '2009-12-31';
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_INC_PREV_FIRST_SPLIT');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
(
	ALF_PE		BIGINT,
	FIRST_DATE	DATE,
	TYPE		VARCHAR(6),
	INCIDENT	INTEGER,
	PREVALENT	INTEGER,
	PEDW_ADMIS	INTEGER,
	GP_ADMIS	INTEGER
)	
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
--
WITH FIRST_ADMIS AS
(
SELECT
	*
FROM SAILW1483V.PREP_FIRST_EVENT
)

SELECT
F.ALF_PE,
F.FIRST_DATE,
F.TYPE,
CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 1 ELSE 0 END AS INCIDENT,
CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 0 ELSE 1 END AS PREVALENT,	
F.PEDW_FIRST,
F.GP_FIRST
FROM FIRST_ADMIS F

JOIN SAILW1483V.PREP_ALF_OVER18 P
ON F.ALF_PE = P.ALF_PE
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
;
--
-- Count incidence and prevalence
SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
WHERE PREVALENT = 1;

SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
WHERE INCIDENT = 1;
------------------------------------------
--
-- Returning prevalent cases who were alive at start of study period, and incident cases who were alive at their entry date
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_ALF_ALIVE');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_ALF_ALIVE
(
	ALF_PE		BIGINT
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_ALF_ALIVE
--
--Prevalent
WITH PREV_A AS
(
SELECT
ALF_PE,
FIRST_DATE
FROM SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
WHERE PREVALENT = 1
),

PREV_B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE
FROM PREV_A A

LEFT JOIN SAILW1483V.EXTRACT_ADDE_DEATHS D
ON A.ALF_PE = D.ALF_PE

WHERE 
D.DEATH_DT IS NULL
OR D.DEATH_DT >= SAILW1483V.STUDY_START_DATE
),

--SELECT COUNT(DISTINCT ALF_PE) FROM PREV_B

--Incident
INC_A AS
(
SELECT
ALF_PE,
FIRST_DATE
FROM SAILW1483V.PREP_INC_PREV_FIRST_SPLIT
WHERE INCIDENT = 1
),

INC_B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE
FROM INC_A A

LEFT JOIN SAILW1483V.EXTRACT_ADDE_DEATHS D
ON A.ALF_PE = D.ALF_PE

WHERE 
D.DEATH_DT IS NULL
OR D.DEATH_DT >= A.FIRST_DATE
)

--SELECT COUNT(DISTINCT ALF_PE) FROM INC_B

--Union

SELECT
DISTINCT ALF_PE
FROM PREV_B

UNION

SELECT
DISTINCT ALF_PE
FROM INC_B
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_ALF_ALIVE
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_ALF_ALIVE
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_ALF_ALIVE
;
------------------------------------------
--
-- Returning prevalent cases who were resident in Wales at start of study period, 
-- and incident cases who had been resident in Wales for > 90 days at their entry date
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_ALF_RES');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_ALF_RES
(
	ALF_PE		BIGINT
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_ALF_RES
--
--Prevalent
WITH PREV_A AS
(
SELECT
A.ALF_PE,
'2010-01-01' AS STUDY_START_DATE
FROM SAILW1483V.PREP_INC_PREV_FIRST_SPLIT A

JOIN SAILW1483V.PREP_ALF_ALIVE B
ON A.ALF_PE = B.ALF_PE

WHERE PREVALENT = 1
),

PREV_B AS
(
SELECT
A.ALF_PE,
A.STUDY_START_DATE,
W.START_DATE,
W.END_DATE,
WELSH_ADDRESS
FROM PREV_A A

LEFT JOIN SAILW1483V.EXTRACT_WDSD_SINGLE_CLEAN_GEO_WALES W
ON A.ALF_PE = W.ALF_PE
AND ((A.STUDY_START_DATE BETWEEN W.START_DATE AND W.END_DATE) OR (A.STUDY_START_DATE >= W.START_DATE AND W.END_DATE = '9999-01-01'))
),

PREV_C AS
(
SELECT
ALF_PE
FROM PREV_B

WHERE WELSH_ADDRESS = 1
),

--Incident
INC_A AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE
FROM SAILW1483V.PREP_INC_PREV_FIRST_SPLIT A

JOIN SAILW1483V.PREP_ALF_ALIVE B
ON A.ALF_PE = B.ALF_PE

WHERE INCIDENT = 1
),

INC_B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
W.START_DATE,
W.END_DATE,
WELSH_ADDRESS
FROM INC_A A

LEFT JOIN SAILW1483V.EXTRACT_WDSD_SINGLE_CLEAN_GEO_WALES W
ON A.ALF_PE = W.ALF_PE
AND W.START_DATE <= A.FIRST_DATE-90
),

INC_C AS
(
SELECT
ALF_PE,
FIRST_DATE
FROM INC_B

WHERE WELSH_ADDRESS = 1
)

--Union
SELECT
DISTINCT ALF_PE
FROM PREV_C

UNION

SELECT
DISTINCT ALF_PE
FROM INC_C
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_ALF_RES
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_ALF_RES
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_ALF_RES
;
------------------------------------------
--
-- Returning prevalent cases who were registered with a SAIL-providing GP practice at start of study period, 
-- and incident cases who had > 90 days of SAIL-providing GP practice registration at their entry date
------------------------------------------
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_ALF_REG');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_ALF_REG
(
	ALF_PE		BIGINT
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_ALF_REG
--
--Prevalent
WITH PREV_A AS
(
SELECT
A.ALF_PE,
'2010-01-01' AS STUDY_START_DATE

FROM SAILW1483V.PREP_INC_PREV_FIRST_SPLIT A

JOIN SAILW1483V.PREP_ALF_RES B
ON A.ALF_PE = B.ALF_PE

WHERE PREVALENT = 1
),

PREV_B AS
(
SELECT
A.ALF_PE,
A.STUDY_START_DATE,
G.START_DATE,
G.END_DATE,
GP_DATA_FLAG AS SAIL_PRAC
FROM PREV_A A

LEFT JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN G
ON A.ALF_PE = G.ALF_PE
AND ((A.STUDY_START_DATE BETWEEN G.START_DATE AND G.END_DATE) OR (A.STUDY_START_DATE >= G.START_DATE AND G.END_DATE = '9999-12-31'))
),

PREV_C AS
(
SELECT
ALF_PE
FROM PREV_B

WHERE SAIL_PRAC = 1
),

--Incident
INC_A AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE

FROM SAILW1483V.PREP_INC_PREV_FIRST_SPLIT A

JOIN SAILW1483V.PREP_ALF_RES B
ON A.ALF_PE = B.ALF_PE

WHERE INCIDENT = 1
),

INC_B AS
(
SELECT
A.ALF_PE,
A.FIRST_DATE,
G.START_DATE,
G.END_DATE,
GP_DATA_FLAG AS SAIL_PRAC
FROM INC_A A

LEFT JOIN SAILW1483V.EXTRACT_WLGP_CLEAN_GP_REG_BY_PRAC_INCLNONSAIL_MEDIAN G
ON A.ALF_PE = G.ALF_PE
AND G.START_DATE <= A.FIRST_DATE-90
),

INC_C AS
(
SELECT
ALF_PE
FROM INC_B
WHERE SAIL_PRAC = 1
)

--Union 
SELECT
DISTINCT ALF_PE
FROM PREV_C

UNION

SELECT
DISTINCT ALF_PE
FROM INC_C
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_ALF_REG
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_ALF_REG
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_ALF_REG
;
------------------------------------------
--
-- Returning cases who made it into the study cohort after all exclusions, with their initial diagnosis characteristics
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.COHORT_ALFS');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.COHORT_ALFS
(
	ALF_PE		BIGINT,
	FIRST_DATE	DATE,
	TYPE		VARCHAR(6),
	INCIDENT	INTEGER,
	PREVALENT	INTEGER,
	PEDW_ADMIS	INTEGER,
	GP_ADMIS	INTEGER
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.COHORT_ALFS
--
WITH FIRST_ADMIS AS
(
SELECT
	*
FROM SAILW1483V.PREP_FIRST_EVENT
)

SELECT
F.ALF_PE,
F.FIRST_DATE,
F.TYPE,
CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 1 ELSE 0 END AS INCIDENT,
CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 0 ELSE 1 END AS PREVALENT,	
F.PEDW_FIRST,
F.GP_FIRST
FROM FIRST_ADMIS F

JOIN SAILW1483V.PREP_ALF_REG P
ON F.ALF_PE = P.ALF_PE
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.COHORT_ALFS
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.COHORT_ALFS
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.COHORT_ALFS
;
------------------------------------------
--
-- Characterising incident primary care diagnoses
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_INC_PREV_WLGP');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_INC_PREV_WLGP
(
	ALF_PE		BIGINT,
	FIRST_DATE	DATE,
	TYPE		VARCHAR(6),
	INCIDENT	INTEGER,
	PREVALENT	INTEGER
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_INC_PREV_WLGP
--
SELECT
	F.*,
	CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 1 ELSE 0 END AS INCIDENT,
	CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 0 ELSE 1 END AS PREVALENT	

FROM SAILW1483V.PREP_GP_FIRST_EVENT F

JOIN SAILW1483V.COHORT_ALFS C
ON F.ALF_PE = C.ALF_PE
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_INC_PREV_WLGP
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_INC_PREV_WLGP
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_INC_PREV_WLGP
;
--
-- Count incidence and prevalence
SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_WLGP
	
WHERE PREVALENT = 1;

SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_WLGP
	
WHERE INCIDENT = 1;
-------------------------------------------
--
-- Characterising incident secondary care diagnoses
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_INC_PREV_PEDW');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_INC_PREV_PEDW
(
	ALF_PE		BIGINT,
	FIRST_DATE	DATE,
	TYPE		VARCHAR(6),
	INCIDENT	INTEGER,
	PREVALENT	INTEGER
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_INC_PREV_PEDW 
--
SELECT
	F.*,
	CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 1 ELSE 0 END AS INCIDENT,
	CASE WHEN F.FIRST_DATE > SAILW1483V.SPLIT_DATE THEN 0 ELSE 1 END AS PREVALENT	
FROM SAILW1483V.PREP_PEDW_FIRST_EVENT F

JOIN SAILW1483V.COHORT_ALFS C
ON F.ALF_PE = C.ALF_PE
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_INC_PREV_PEDW
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_INC_PREV_PEDW
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_INC_PREV_PEDW
;
--
-- Count incidence and prevalence
SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_PEDW
	
WHERE PREVALENT = 1;

SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_PEDW
	
WHERE INCIDENT = 1;
------------------------------------------
--
-- Characterising incident diagnoses for each vascular territory of ASCVD
------------------------------------------   
--
--Drop Table
CALL FNC.DROP_IF_EXISTS('SAILW1483V.PREP_INC_PREV_TERR');
COMMIT;
------------------------------------------
--
--Create Table
CREATE TABLE SAILW1483V.PREP_INC_PREV_TERR
(
	ALF_PE		BIGINT,
	FIRST_DATE	DATE,
	TYPE		VARCHAR(6),
	TERR_COUNT	INTEGER,
	INC_PREV	INTEGER,
	PEDW_ADMIS	INTEGER,
	GP_ADMIS	INTEGER	
)
;
COMMIT;
------------------------------------------
--
--Insert into Table
INSERT INTO SAILW1483V.PREP_INC_PREV_TERR
--
WITH PEDW AS
(
SELECT
	SPELL.ALF_PE,
	SPELL.ADMIS_DT,
	ICD.ICD_TYPE
FROM SAILW1483V.EXTRACT_PEDW_SPELL SPELL

LEFT OUTER JOIN SAILW1483V.EXTRACT_PEDW_EPISODE EPI ON
	SPELL.PROV_UNIT_CD = EPI.PROV_UNIT_CD
	AND SPELL.SPELL_NUM_PE = EPI.SPELL_NUM_PE

LEFT OUTER JOIN SAILW1483V.EXTRACT_PEDW_DIAG DIAG ON
	EPI.PROV_UNIT_CD = DIAG.PROV_UNIT_CD
	AND EPI.SPELL_NUM_PE = DIAG.SPELL_NUM_PE
	AND EPI.EPI_NUM = DIAG.EPI_NUM
	
JOIN SAILW1483V.PHEN_ASCVD_ICD10 ICD ON
	DIAG.DIAG_CD_123 = ICD.DIAG_CD_123

JOIN SAILW1483V.COHORT_ALFS A
	ON SPELL.ALF_PE = A.ALF_PE	
),

PEDW_TERR_RANK AS
(
SELECT
*,
ROW_NUMBER() OVER(PARTITION BY ALF_PE, ICD_TYPE ORDER BY ADMIS_DT) AS ADMIS_ORDER
FROM PEDW 

WHERE PEDW.ADMIS_DT BETWEEN SAILW1483V.START_DATE AND SAILW1483V.END_DATE
AND PEDW.ICD_TYPE IN('STROKE','IHD','PAD')
),

FIRST_TERR_PEDW AS
(
SELECT
	P.ALF_PE,
	P.ADMIS_DT AS FIRST_DATE,
	P.ICD_TYPE AS TYPE
FROM PEDW_TERR_RANK P

WHERE ADMIS_ORDER = 1
),

GP AS
(
SELECT
	GP.ALF_PE,
	GP.EVENT_DT,
	C.READ_TYPE
FROM SAILW1483V.EXTRACT_WLGP_GP_EVENT_CLEANSED GP

JOIN SAILW1483V.PHEN_ASCVD_READ C
	ON GP.EVENT_CD = C.READ_CODE
	
JOIN SAILW1483V.COHORT_ALFS A
	ON GP.ALF_PE = A.ALF_PE	
),

GP_TERR_RANK AS
(
SELECT
*,
ROW_NUMBER() OVER(PARTITION BY ALF_PE,READ_TYPE ORDER BY EVENT_DT) AS ADMIS_ORDER
FROM GP 

WHERE GP.EVENT_DT BETWEEN SAILW1483V.START_DATE AND SAILW1483V.END_DATE
AND GP.READ_TYPE IN('STROKE','IHD','PAD')
),

FIRST_TERR_GP AS
(
SELECT
	G.ALF_PE,
	G.EVENT_DT AS FIRST_DATE,
	G.READ_TYPE AS TYPE
FROM GP_TERR_RANK G

WHERE ADMIS_ORDER = 1
),

ADMIS_ALL AS
(
SELECT 
	PEDW.ALF_PE,
	PEDW.FIRST_DATE,
	PEDW.TYPE,
	1 AS PEDW_ADMIS,
	0 AS GP_ADMIS
FROM FIRST_TERR_PEDW PEDW

UNION ALL

SELECT 
	GP.ALF_PE,
	GP.FIRST_DATE,
	GP.TYPE,
	0 AS PEDW_ADMIS,
	1 AS GP_ADMIS
FROM FIRST_TERR_GP GP
),

RANKED AS
(
SELECT
ALF_PE,
FIRST_DATE,
ROW_NUMBER() OVER(PARTITION BY ALF_PE, TYPE ORDER BY FIRST_DATE) AS ADMIS_ORDER,
TYPE,
PEDW_ADMIS,
GP_ADMIS

FROM ADMIS_ALL
),

FIRST_ AS
(
SELECT
ALF_PE,
FIRST_DATE,
TYPE,
ROW_NUMBER() OVER(PARTITION BY ALF_PE ORDER BY FIRST_DATE) AS TERR_COUNT,
PEDW_ADMIS,
GP_ADMIS
FROM RANKED

WHERE ADMIS_ORDER = 1
),

INC_PREV AS
(
SELECT
ALF_PE,
CASE WHEN MIN(FIRST_DATE) > SAILW1483V.SPLIT_DATE THEN 1 ELSE 0 END AS INC_PREV
FROM FIRST_
GROUP BY ALF_PE
)

SELECT
F.ALF_PE,
F.FIRST_DATE,
F.TYPE,
F.TERR_COUNT,
I.INC_PREV,
F.PEDW_ADMIS,
F.GP_ADMIS
FROM FIRST_ F

LEFT JOIN INC_PREV I
ON F.ALF_PE = I.ALF_PE
;
COMMIT;
--
------------------------------------------
--
-- Select all results
SELECT 
	* 
FROM 
	SAILW1483V.PREP_INC_PREV_TERR
ORDER BY ALF_PE
FETCH FIRST 100 ROWS ONLY;
--
-- Count all results
SELECT 
	COUNT(*)
FROM 
	SAILW1483V.PREP_INC_PREV_TERR
;
--
-- Count distinct alfs
SELECT 
	COUNT(DISTINCT ALF_PE)
FROM 
	SAILW1483V.PREP_INC_PREV_TERR
;
--
-- Count incidence and prevalence
SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_TERR
WHERE INC_PREV = 1;

SELECT 
	COUNT(DISTINCT ALF_PE) 
FROM 
	SAILW1483V.PREP_INC_PREV_TERR
WHERE INC_PREV = 1;
------------------------------------------